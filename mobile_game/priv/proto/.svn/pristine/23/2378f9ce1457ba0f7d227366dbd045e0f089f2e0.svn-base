@include "game.sproto"

typedef team_id = u32

struct member_info
{
    id:player_id,
    name:sstr,
    level:player_level,
    combar_power:player_power,
    carrer:player_carrer,
    MaxHp:u32,
    online:bool
}


## 创建队伍信息
proto MSG_TEAM_CREATE=1
{
    client{
        message{
            teamType:u8,      ## 队伍类型 1多人竞技场队伍
            teamName:sstr
        }
    }

    server{
        message {
            teamid:team_id,
            teamtype:u8,
            teamname:sstr,
            teammembers:list<member:member_info>
        }
    }

    errnos{
        ERR_TEAM_ALREADY_EXIST,
        ERR_GWGC_NOT_STAR,
        ERR_TEAM_TYPE_ERROR
    }
}


## 主动离开队伍
proto MSG_TEAM_QUIT=2
{
    client{
        message=empty
    }

    server{
        message {
            id:player_id
        }
    }

    errnos{
        ERR_TEAM_INS_ROOM_NOT_EXIST,
        ERR_TEAM_NOT_EXIST_PLAYER
    }
}

#踢出队伍
proto MSG_TEAM_KICKOUT=3
{
    client{
        message{
            id:player_id 
        }
    }

    server{
        #message{ id:player_id }    返回使用主动离开队伍的返回(暂时屏蔽)
    }

    errnos{
        ERR_TEAM_INS_ROOM_NOT_EXIST,
        ERR_TEAM_NOT_EXIST_PLAYER,
        ERR_TEAM_NOT_LEADER
    }
}
## 加入队伍
proto MSG_TEAM_JOIN=4
{
    client{
        message{
            teamId:team_id
        }
    }

    server{ 
        message{
            teamid:team_id,
            teamtype:u8,
            teamname:sstr,
            #info:binary
            teammembers:list<member:member_info>
        }
    }

    errnos{
        ERR_TEAM_INS_ROOM_NOT_EXIST,
        ERR_TEAM_NOT_EXIST_PLAYER,
        ERR_TEAM_NOT_LEADER
    }
}

## 加入队伍通知（通知队伍内其他成员
proto MSG_TEAM_MEMBER_JOIN=5
{
    client{}

    server{ 
        message{
            teamMember:member_info 
        }
    }
}
## 解散
proto MSG_TEAM_DISSOLVE=6
{
    client{
        message=empty
    }

    server{
        message=empty 
    }

    errnos{
        ERR_TEAM_INS_ROOM_NOT_EXIST,
        ERR_TEAM_NOT_LEADER
    }
}

## 通过组队类型，获取队伍列表信息
proto MSG_TEAM_GC_LIST_BY_TYPE=7
{
    client{
        message{
            Type:u8
        }
    }

    server{
        message{
            #Size:u8,
            #while
                #TeamId:team_id
                #TeamName/sstr
                #Size:u8
                #TeamMember/binary
            Teammembers:binary
        }
    }
}
## 申请加入队伍的消息列表，仅限于队长
proto MSG_TEAM_GC_SHENQING_LIST=8
{
    client{
        message=empty
    }

    server{
        message{
            #Size:u8,
            #while
                #PlayerId:u64
                #PlayerName/binary
                #PlayerLevel:u8
                #PlayerPower:u32
                #PlayerJob:u8,
                #PlayerIsOnline:u8
            PlayerInfo:binary
        }
    }

    errnos{
        ERR_TEAM_INS_ROOM_NOT_EXIST,
        ERR_TEAM_NOT_LEADER
    }
}
## 队长处理玩家申请加入队伍的消息
proto MSG_TEAM_GC_DEAL_SHENQING=9
{
    client{
        message{
            IsOk:u8,   ## 1->ok    2->fail
            PlayerId:u64
        }
    }

    server{
        message{
            IsOk:u8   ## 1->ok    2->fail
        }
    }

    errnos{
        ERR_TEAM_INS_ROOM_NOT_EXIST,
        ERR_TEAM_NOT_LEADER,
        ERR_ROLE_NOT_EXIST,
        ERR_SYSTEM,
        ERR_TEAM_IS_FULL
    }
}

## 玩家注册或者取消关注队伍列表的动态
proto MSG_TEAM_GC_RE=10
{
    client{
        message{
            ReOrUre:u8 ## 1->Re    2->Ure
        }
    }

    server{}
}

## 邀请玩家加入我的队伍
proto MSG_TEAM_GC_JOIN_MY_TAEA=11
{
    client{
        message{
            Size:u8,
            PlayerIdList:binary
        }
    }
    server{}
}

## 给被邀请的发送邀请通知
proto MSG_TEAM_GC_NOTICE_JOIN_MY_TEAM_OF_PLAYERS=12
{
    client{}
    server{
        message{
            TeamId:team_id,
            Name:sstr
        }
    }
}

## 申请加入队伍
proto MSG_TEAM_GC_APPLY_JOIN=13
{
    client{
        message{
            TeamId:team_id
        }
    }

    server{
        message{
            IsOk:u8   ## 1->ok
        }
    }

    errnos{
        ERR_TEAM_INS_ROOM_NOT_EXIST
    }
}

## 快速匹配
proto MSG_TEAM_GC_FAST_JOIN=14
{
    client{
        message{
            teamType:u8
        }
    }

    server{}

    errnos{
        ERR_TEAM_FAST_JOIN,
        ERR_TEAM_NOT_JOIN_SELF
    }
}