%% Warning: Do not edit this file. It was automatically
%% generated by 'smerl' on {{2017,8,11},{15,1,15}}.

-module(dbcache).

-export([load_tabs/2, info/1, load_data/2,
	 lookup_element/3, lookup/2, delete/2, update_element/3,
	 update_counter/3, insert_new/2, update/2]).

load_tabs(Key, TabList) ->
    lists:map(fun (Tab) ->
		      case dbcache:load_data(Tab, Key) of
			[] -> none;
			[N] -> N
		      end
	      end,
	      TabList).

info(player_event_tab) ->
    {db_table_meta, player_event_tab, set, [id, eng],
     event_tab, 2, false, undefined, false, [], 20, 30,
     undefined};
info(player_pet_egg_tab) ->
    {db_table_meta, player_pet_egg_tab, set,
     [pet_id, pet_info], undefined, 5, false, undefined,
     false, [], 10, 30, undefined};
info(player_server_login_prize_tab) ->
    {db_table_meta, player_server_login_prize_tab, set,
     [id, get_prize_list, zero_time_of_day, login_day],
     undefined, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_vip_new_tab) ->
    {db_table_meta, player_vip_new_tab, set,
     [id, vip_level, vip_value, month_card, yongjiu_card,
      grow_jijin_card, grow_jijin_list, vip_use_data,
      vip_buy_status, vip_gift_one, vip_buy_gift_one,
      vip_gift_every_day, every_day_cost_list, sum_cost_list,
      prize_status_list, is_get_month_card_prize,
      is_get_yongjiu_card_prize, cost_total_rmb],
     undefined, 1, false, undefined, false, [], 5, 30,
     undefined};
info(ranking_tab) ->
    {db_table_meta, ranking_tab, set, [name, ranking],
     undefined, 5, false, undefined, true, [], 5, 30,
     undefined};
info(player_nine_lottery_tab) ->
    {db_table_meta, player_nine_lottery_tab, set,
     [id, nine_lottery_times, log_list],
     player_nine_lottery_tab, 3, false, undefined, false, [],
     1, 30, undefined};
info(guild_mining_state) ->
    {db_table_meta, guild_mining_state, set,
     [id, guild_minging_state_list], state, 3, false,
     undefined, true, [], 1, 30, undefined};
info(offline_msg_tab) ->
    {db_table_meta, offline_msg_tab, set,
     [playerId, msg_list], undefined, 5, false, undefined,
     false, [], 1, 30, undefined};
info(nine_lottery_all_log) ->
    {db_table_meta, nine_lottery_all_log, set,
     [id, log_list], nine_lottery_all_log, 3, false,
     undefined, false, [], 1, 30, undefined};
info(guild_boss) ->
    {db_table_meta, guild_boss, set, [guild_id, field],
     undefined, 10, false, undefined, true, [], 50, 30,
     undefined};
info(guild_event_tab) ->
    {db_table_meta, guild_event_tab, set,
     [guild_id, event_list], undefined, 10, false, undefined,
     true, [], 50, 30, undefined};
info(guild_buildings_tab) ->
    {db_table_meta, guild_buildings_tab, set,
     [guild_id, building_list], undefined, 10, false,
     undefined, true, [], 10, 30, undefined};
info(guild_member_online_tab) ->
    {db_table_meta, guild_member_online_tab, set,
     [guild_id, player_list], undefined, 10, false,
     undefined, true, [], 10, 30, undefined};
info(guild_player_association_tab) ->
    {db_table_meta, guild_player_association_tab, set,
     [guild_id, player_list], undefined, 10, false,
     undefined, true, [], 10, 30, undefined};
info(guild_tab) ->
    {db_table_meta, guild_tab, set,
     [guild_name, master_id, totle_exp, totle_player, notice,
      notice_update_time, totem_id, border_id, create_time],
     undefined, 10, false, undefined, true, [], 50, 30,
     undefined};
info(guild_id_tab) ->
    {db_table_meta, guild_id_tab, set,
     [guild_id, guild_name], undefined, 10, false, undefined,
     true, [], 10, 30, undefined};
info(player_alchemy_tab) ->
    {db_table_meta, player_alchemy_tab, set,
     [id, count, pay_count], undefined, 1, false, undefined,
     false, [], 5, 30, undefined};
info(payment_confirm_tab) ->
    {db_table_meta, payment_confirm_tab, set,
     [playerId, confirm_list], undefined, 0, false,
     undefined, false, [], 1, 30, undefined};
info(player_guild_saint_tab) ->
    {db_table_meta, player_guild_saint_tab, set,
     [player_id, guild_saint_list], undefined, 10, false,
     undefined, false, [], 10, 30, undefined};
info(player_guild_count) ->
    {db_table_meta, player_guild_count, set,
     [player_id, daily_task_count], undefined, 10, false,
     undefined, false, [], 10, 30, undefined};
info(player_guild_is_join_guild) ->
    {db_table_meta, player_guild_is_join_guild, set,
     [player_id, quit_guild_times], undefined, 10, false,
     undefined, false, [], 10, 30, undefined};
info(player_guild_tech_buildings) ->
    {db_table_meta, player_guild_tech_buildings, set,
     [player_id, guild_id, tech_items], undefined, 10, false,
     undefined, false, [], 10, 30, undefined};
info(player_guild_member) ->
    {db_table_meta, player_guild_member, set,
     [player_id, guild_id, player_position, join_time,
      totle_exp, lv, exp, daily_task_count],
     undefined, 10, false, undefined, false, [], 10, 30,
     undefined};
info(player_progress_tab) ->
    {db_table_meta, player_progress_tab, set,
     [player_id, iprogress_list], undefined, 3, false,
     undefined, false, [], 20, 30, undefined};
info(service_camp_tab) ->
    {db_table_meta, service_camp_tab, set,
     [id, is_open, is_fight, end_timestamp, server_down_time,
      priv_refresh_time, god_camp_point, magic_camp_point,
      event_list],
     undefined, 10, false, undefined, false, [], 30, 30,
     undefined};
info(player_arena_log_tab) ->
    {db_table_meta, player_arena_log_tab, set, [id, log],
     undefined, 5, false, undefined, false, [], 10, 30,
     undefined};
info(player_card_new_tab) ->
    {db_table_meta, player_card_new_tab, set,
     [id, card_list], undefined, 3, false, undefined, false,
     [], 1, 30, undefined};
info(sky_ins_service) ->
    {db_table_meta, sky_ins_service, set,
     [id, is_open, end_timestamp], undefined, 10, false,
     undefined, false, [], 30, 30, undefined};
info(player_friend_private) ->
    {db_table_meta, player_friend_private, set,
     [id, ver, friend_ids, day_chat_score, day_gift_score,
      score, send_flowers, msg_id],
     friend_private, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_mall_tab) ->
    {db_table_meta, player_mall_tab, set, [id, list],
     undefined, 5, false, undefined, true, [], 1, 30,
     undefined};
info(player_open_server_2_tab) ->
    {db_table_meta, player_open_server_2_tab, set,
     [id, type_task, prize_state_list, is_get_prize,
      is_record_on_day_task_state, is_record_all_task_state,
      today_pay_money, today_is_pay_money, pay_day_count],
     undefined, 3, false, undefined, false, [], 1, 30,
     undefined};
info(g_misc_tab) ->
    {db_table_meta, g_misc_tab, set, [id, val], undefined,
     0, false, undefined, false, [], 10, 30, undefined};
info(player_abyss_prize_info_tab) ->
    {db_table_meta, player_abyss_prize_info_tab, set,
     [player_id, abyss_score, prizeList, is_in_abyss],
     undefined, 10, false, undefined, false, [], 10, 30,
     undefined};
info(player_abyss_tab) ->
    {db_table_meta, player_abyss_tab, set,
     [player_id, max_easy_layer, easy_layer, auto_easy_layer,
      max_hard_layer, hard_layer, auto_hard_layer,
      daily_count, buy_fight_count, daily_reset,
      buy_daily_reset, score, hard_score, max_score,
      rankIndex],
     undefined, 10, false, undefined, false, [], 10, 30,
     undefined};
info(player_honest_user_tab) ->
    {db_table_meta, player_honest_user_tab, set,
     [id, level_prize_state, suit_prize_state],
     player_honest_user_tab, 3, false, undefined, false, [],
     1, 30, undefined};
info(player_pets_tab) ->
    {db_table_meta, player_pets_tab, set,
     [id, pet_list, shangzhen_list, shangzhen_attr_list,
      fight_pet],
     undefined, 2, false, undefined, false, [], 1, 30,
     undefined};
info(player_bounty_tab) ->
    {db_table_meta, player_bounty_tab, set,
     [id, is_opened, bounty_task, liveness,
      bounty_liveness_prize],
     undefined, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_payment_tab) ->
    {db_table_meta, player_payment_tab, set, [id, val],
     undefined, 4, false, undefined, false, [], 20, 30,
     undefined};
info(payment_tab) ->
    {db_table_meta, payment_tab, set,
     [billno, pay_num, time, player_id, status, diamond_flag,
      refId, pay_ret, pay_code, pay_msg],
     undefined, 0, false, undefined, false, [], 1, 30,
     undefined};
info(player_pc_prize_tab) ->
    {db_table_meta, player_pc_prize_tab, set, [id, list],
     undefined, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_pc_goal_tab) ->
    {db_table_meta, player_pc_goal_tab, set, [id, list],
     undefined, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_camp_tab) ->
    {db_table_meta, player_camp_tab, set,
     [player_id, self_camp, enter_count, exploit, camp_value,
      fight_instance, fight_endtime, select_camp_time,
      open_instance],
     undefined, 10, false, undefined, false, [], 10, 30,
     undefined};
info(player_sky_ins_tab) ->
    {db_table_meta, player_sky_ins_tab, set,
     [player_id, kill_client_monster, kill_player,
      kill_monster, join_time],
     undefined, 10, false, undefined, false, [], 30, 30,
     undefined};
info(player_fishing_daily_tab) ->
    {db_table_meta, player_fishing_daily_tab, set,
     [player_id, fish_bait, buy_fish_bait, fish_net,
      fishing_id],
     undefined, 3, false, undefined, false, [], 30, 30,
     undefined};
info(player_daily_tab) ->
    {db_table_meta, player_daily_tab, set,
     [player_id, activity_data], undefined, 3, false,
     undefined, false, [], 30, 30, undefined};
info(black_shop_state) ->
    {db_table_meta, black_shop_state, set,
     [id, turn, is_open, end_time], state, 3, false,
     undefined, true, [], 1, 30, undefined};
info(auction_log_tab) ->
    {db_table_meta, auction_log_tab, set,
     [id, playerId, itemId, money_type, owner_name, price,
      datetime, payType],
     auction_log_tab, 3, false, undefined, false, [], 1, 30,
     undefined};
info(com_auction_new_tab) ->
    {db_table_meta, com_auction_new_tab, set,
     [id, item_state, ver, item, item_type, seller,
      money_type, start_price, high_price, step_price,
      cur_price, bider_id, fee_rate],
     com_auction_new_tab, 3, false, undefined, true, [], 1,
     30, undefined};
info(account_prize_tab) ->
    {db_table_meta, account_prize_tab, set,
     [account_name, level_prize_state, suit_prize_state,
      phase_list],
     account_prize_tab, 0, false, undefined, false, [], 20,
     30, undefined};
info(player_attr_image_tab) ->
    {db_table_meta, player_attr_image_tab, set,
     [id, attr_new], player_attr_image_tab, 3, false,
     undefined, false, [], 20, 30, undefined};
info(player_equip_tab) ->
    {db_table_meta, player_equip_tab, set, [id, bucket],
     player_backet_tab, 3, false, undefined, false, [], 1,
     30, undefined};
info(player_data_tab) ->
    {db_table_meta, player_data_tab, set,
     [player_id, field_data], undefined, 4, false, undefined,
     false, [], 10, 30, undefined};
info(player_misc_tab) ->
    {db_table_meta, player_misc_tab, set, [id, val],
     undefined, 4, false, undefined, false, [], 20, 30,
     undefined};
info(player_attr_tab) ->
    {db_table_meta, player_attr_tab, set, [id, attr],
     undefined, 4, false, undefined, false, [], 20, 30,
     undefined};
info(player_name_tab) ->
    {db_table_meta, player_name_tab, set, [name, id],
     undefined, 4, false, undefined, true, [], 200, 30,
     undefined};
info(player_tab) ->
    {db_table_meta, player_tab, set,
     [id, name, career, level, hp, mp, longwens, pearl,
      long_wen, exp, money, diamond, fragment, honour, sp,
      sp_buy_count, scene_id, x, y, save_scene_id, save_x,
      save_y, create_time, last_login_time, last_logout_time,
      combat_power, item_id, add_hp_mp_info, main_ins_jinxing,
      main_ins_yinxing],
     undefined, 3, false,
     {player_tab, undefined, undefined, undefined, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, undefined, -1, -1,
      undefined, -1, -1, undefined, undefined, 0, 10, 1,
      {0, {0, 0}}, 0, 0},
     false, [], 20, 30, undefined};
info(player_client_data_tab) ->
    {db_table_meta, player_client_data_tab, set, [id, data],
     undefined, 3, false, undefined, false, [], 20, 30,
     undefined};
info(account_tab) ->
    {db_table_meta, account_tab, set,
     [account_name, player_id, platform_id, create_time,
      password, player_statue, account_statue],
     undefined, 0, false, undefined, false, [], 20, 30,
     undefined};
info(player_platform_id_tab) ->
    {db_table_meta, player_platform_id_tab, set,
     [id, player_id], undefined, 2, false, undefined, false,
     [], 10, 30, undefined};
info(player_crown_new_tab) ->
    {db_table_meta, player_crown_new_tab, set,
     [id, anger, skill_list], undefined, 3, false, undefined,
     false, [], 1, 30, undefined};
info(player_arena_tab) ->
    {db_table_meta, player_arena_tab, set,
     [id, name, career, power, arena_lev, high_arena_lev,
      arena_cent, award_state, trun_state, flush_times,
      challenge_list, best_rank, p2e_win, p2e_loss, p2p_win,
      p2p_loss, p2p_kill, m_p2p_win, m_p2p_loss, m_p2p_kill,
      m_p2p_die],
     arena_info, 4, false, undefined, true, [], 1, 30,
     undefined};
info(player_shop_back_tab) ->
    {db_table_meta, player_shop_back_tab, set,
     [id, ver, item_infos], shop_back_tab, 2, false,
     undefined, false, [], 1, 30, undefined};
info(player_main_ins_challenge_tab) ->
    {db_table_meta, player_main_ins_challenge_tab, set,
     [id, challenge_tree], undefined, 6, false, undefined,
     false, [], 5, 30, undefined};
info(main_chapter_prize_status) ->
    {db_table_meta, main_chapter_prize_status, set,
     [id, isget_list], undefined, 6, false, undefined, false,
     [], 5, 30, undefined};
info(main_chapter_prize) ->
    {db_table_meta, main_chapter_prize, set,
     [id, goal_value, current_value, ins_list, is_get],
     undefined, 6, false, undefined, false, [], 5, 30,
     undefined};
info(main_ins_rank) ->
    {db_table_meta, main_ins_rank, set,
     [scene_id, rank_list], undefined, 6, false, undefined,
     false, [], 5, 30, undefined};
info(player_main_ins_tab) ->
    {db_table_meta, player_main_ins_tab, set,
     [id, star_coin, mng], undefined, 6, false, undefined,
     false, [], 5, 30, undefined};
info(player_friend_common) ->
    {db_table_meta, player_friend_common, set,
     [id, ver, open_rob, gift_qua, send_count, recv_count,
      send_gift_applys, req_gift_applys, recv_friend_applys,
      send_gift_type, send_player_ids, recv_player_ids,
      send_friend_ids, send_req_ids],
     friend_common, 3, false, undefined, true, [], 1, 30,
     undefined};
info(guild_boss_first_kill) ->
    {db_table_meta, guild_boss_first_kill, set,
     [record_id, killer_id], undefined, 5, false, undefined,
     false, [], 10, 30, undefined};
info(arena_p2e_rank_tab) ->
    {db_table_meta, arena_p2e_rank_tab, set,
     [id, count, rank_list], arena_p2e_rank_tab, 4, false,
     undefined, true, [], 10, 30, undefined};
info(arena_robot_tab) ->
    {db_table_meta, arena_robot_tab, set,
     [id, name, career, lev, attr, skills], arena_robot_tab,
     4, false, undefined, false, [], 10, 30, undefined};
info(offline_mail_tab) ->
    {db_table_meta, offline_mail_tab, set, [id, mail_list],
     undefined, 5, false, undefined, false, [], 10, 30,
     undefined};
info(player_mail_tab) ->
    {db_table_meta, player_mail_tab, set, [id, mng],
     undefined, 5, false, undefined, false, [], 10, 30,
     undefined};
info(player_ride_soul) ->
    {db_table_meta, player_ride_soul, set,
     [id, ride_soul_info], undefined, 2, false, undefined,
     false, [], 1, 30, undefined};
info(player_rides) ->
    {db_table_meta, player_rides, set, [id, rides, riding],
     undefined, 2, false, undefined, false, [], 1, 30,
     undefined};
info(player_timer_tab) ->
    {db_table_meta, player_timer_tab, set,
     [id, run_mng, proc_mng, stop_mng,
      offline_auto_stop_timers],
     timer_tab, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_equip_goods_tab) ->
    {db_table_meta, player_equip_goods_tab, set,
     [id, equip_bucket, goods_bucket, depot_bucket,
      qianghu_list],
     undefined, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_shopping_history) ->
    {db_table_meta, player_shopping_history, set,
     [id, seller_history], undefined, 5, false, undefined,
     false, [], 5, 30, undefined};
info(player_seller_tab) ->
    {db_table_meta, player_seller_tab, set,
     [player_id, seller_item_list, activation_time,
      refresh_time],
     undefined, 2, false, undefined, false, [], 10, 30,
     undefined};
info(player_crown_tab) ->
    {db_table_meta, player_crown_tab, set,
     [id, gen_id, anger, dressed_gems, used_skill, mng],
     undefined, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_limit_value_tab) ->
    {db_table_meta, player_limit_value_tab, set,
     [id, daily_value], limit_value_tab, 2, false, undefined,
     false, [], 1, 30, undefined};
info(player_course_tab) ->
    {db_table_meta, player_course_tab, set, [id, list],
     undefined, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_course_boss_tab) ->
    {db_table_meta, player_course_boss_tab, set,
     [id, count, buy_count, courseind_list, flush_count,
      current_list, buy_flush_count],
     undefined, 3, false, undefined, false, [], 1, 30,
     undefined};
info(player_main_star_shop_tab) ->
    {db_table_meta, player_main_star_shop_tab, set,
     [id, item_list, count], undefined, 2, false, undefined,
     false, [], 10, 30, undefined};
info(player_achievement_tab) ->
    {db_table_meta, player_achievement_tab, set, [id, list],
     undefined, 3, false, undefined, false, [], 10, 30,
     undefined};
info(player_skill_tab) ->
    {db_table_meta, player_skill_tab, set,
     [id, skills, dressed_skills, dress_group_id, long_wens,
      skills_reset_times],
     undefined, 1, false, undefined, false, [], 10, 30,
     undefined};
info(player_status_tab) ->
    {db_table_meta, player_status_tab, set, [id, list],
     undefined, 5, false, undefined, true, [], 1, 30,
     undefined};
info(title_global_data) ->
    {db_table_meta, title_global_data, set,
     [id, title_list, old_title_list], undefined, 5, false,
     undefined, true, [], 1, 30, undefined};
info(genid_tab) ->
    {db_table_meta, genid_tab, set, [tab, id], undefined, 0,
     false, undefined, true, [], 1, 30, undefined};
info(player_recharge_reward_tab) ->
    {db_table_meta, player_recharge_reward_tab, set,
     [id, recharge, reward_status], undefined, 3, false,
     undefined, false, [], 1, 30, undefined};
info(player_ever_suit_info_tab) ->
    {db_table_meta, player_ever_suit_info_tab, set,
     [id, ever_suit_count, ever_suit_list, ever_suit_power],
     player_ever_suit_info_tab, 3, false, undefined, false,
     [], 1, 30, undefined};
info(T) -> erlang:error({badarg, T}).

load_data(T, Key) -> lookup(T, Key).

lookup_element(T, Key, Pos) ->
    case ets:lookup(T, Key) of
      [] ->
	  case mnesia:dirty_read(T, Key) of
	    [] -> throw(badarg);
	    [R] ->
		case ets:insert_new(T, R) of
		  true -> element(Pos, R);
		  false -> [O] = ets:lookup(T, Key), element(Pos, O)
		end
	  end;
      [R] -> element(Pos, R)
    end.

lookup(T, Key) ->
    case ets:lookup(T, Key) of
      [] ->
	  List = mnesia:dirty_read(T, Key),
	  if List =/= [] ->
		 case ets:insert_new(T, List) of
		   true -> List;
		   false -> ets:lookup(T, Key)
		 end;
	     true -> []
	  end;
      List -> List
    end.

delete(player_event_tab, Key) ->
    ets:delete(player_event_tab, Key),
    player_event_tab ! {delete, Key};
delete(player_pet_egg_tab, Key) ->
    ets:delete(player_pet_egg_tab, Key),
    player_pet_egg_tab ! {delete, Key};
delete(player_server_login_prize_tab, Key) ->
    ets:delete(player_server_login_prize_tab, Key),
    player_server_login_prize_tab ! {delete, Key};
delete(player_vip_new_tab, Key) ->
    ets:delete(player_vip_new_tab, Key),
    player_vip_new_tab ! {delete, Key};
delete(ranking_tab, Key) ->
    ets:delete(ranking_tab, Key),
    ranking_tab ! {delete, Key};
delete(player_nine_lottery_tab, Key) ->
    ets:delete(player_nine_lottery_tab, Key),
    player_nine_lottery_tab ! {delete, Key};
delete(guild_mining_state, Key) ->
    ets:delete(guild_mining_state, Key),
    guild_mining_state ! {delete, Key};
delete(offline_msg_tab, Key) ->
    ets:delete(offline_msg_tab, Key),
    offline_msg_tab ! {delete, Key};
delete(nine_lottery_all_log, Key) ->
    ets:delete(nine_lottery_all_log, Key),
    nine_lottery_all_log ! {delete, Key};
delete(guild_boss, Key) ->
    ets:delete(guild_boss, Key), guild_boss ! {delete, Key};
delete(guild_event_tab, Key) ->
    ets:delete(guild_event_tab, Key),
    guild_event_tab ! {delete, Key};
delete(guild_buildings_tab, Key) ->
    ets:delete(guild_buildings_tab, Key),
    guild_buildings_tab ! {delete, Key};
delete(guild_member_online_tab, Key) ->
    ets:delete(guild_member_online_tab, Key),
    guild_member_online_tab ! {delete, Key};
delete(guild_player_association_tab, Key) ->
    ets:delete(guild_player_association_tab, Key),
    guild_player_association_tab ! {delete, Key};
delete(guild_tab, Key) ->
    ets:delete(guild_tab, Key), guild_tab ! {delete, Key};
delete(guild_id_tab, Key) ->
    ets:delete(guild_id_tab, Key),
    guild_id_tab ! {delete, Key};
delete(player_alchemy_tab, Key) ->
    ets:delete(player_alchemy_tab, Key),
    player_alchemy_tab ! {delete, Key};
delete(payment_confirm_tab, Key) ->
    ets:delete(payment_confirm_tab, Key),
    payment_confirm_tab ! {delete, Key};
delete(player_guild_saint_tab, Key) ->
    ets:delete(player_guild_saint_tab, Key),
    player_guild_saint_tab ! {delete, Key};
delete(player_guild_count, Key) ->
    ets:delete(player_guild_count, Key),
    player_guild_count ! {delete, Key};
delete(player_guild_is_join_guild, Key) ->
    ets:delete(player_guild_is_join_guild, Key),
    player_guild_is_join_guild ! {delete, Key};
delete(player_guild_tech_buildings, Key) ->
    ets:delete(player_guild_tech_buildings, Key),
    player_guild_tech_buildings ! {delete, Key};
delete(player_guild_member, Key) ->
    ets:delete(player_guild_member, Key),
    player_guild_member ! {delete, Key};
delete(player_progress_tab, Key) ->
    ets:delete(player_progress_tab, Key),
    player_progress_tab ! {delete, Key};
delete(service_camp_tab, Key) ->
    ets:delete(service_camp_tab, Key),
    service_camp_tab ! {delete, Key};
delete(player_arena_log_tab, Key) ->
    ets:delete(player_arena_log_tab, Key),
    player_arena_log_tab ! {delete, Key};
delete(player_card_new_tab, Key) ->
    ets:delete(player_card_new_tab, Key),
    player_card_new_tab ! {delete, Key};
delete(sky_ins_service, Key) ->
    ets:delete(sky_ins_service, Key),
    sky_ins_service ! {delete, Key};
delete(player_friend_private, Key) ->
    ets:delete(player_friend_private, Key),
    player_friend_private ! {delete, Key};
delete(player_mall_tab, Key) ->
    ets:delete(player_mall_tab, Key),
    player_mall_tab ! {delete, Key};
delete(player_open_server_2_tab, Key) ->
    ets:delete(player_open_server_2_tab, Key),
    player_open_server_2_tab ! {delete, Key};
delete(g_misc_tab, Key) ->
    ets:delete(g_misc_tab, Key), g_misc_tab ! {delete, Key};
delete(player_abyss_prize_info_tab, Key) ->
    ets:delete(player_abyss_prize_info_tab, Key),
    player_abyss_prize_info_tab ! {delete, Key};
delete(player_abyss_tab, Key) ->
    ets:delete(player_abyss_tab, Key),
    player_abyss_tab ! {delete, Key};
delete(player_honest_user_tab, Key) ->
    ets:delete(player_honest_user_tab, Key),
    player_honest_user_tab ! {delete, Key};
delete(player_pets_tab, Key) ->
    ets:delete(player_pets_tab, Key),
    player_pets_tab ! {delete, Key};
delete(player_bounty_tab, Key) ->
    ets:delete(player_bounty_tab, Key),
    player_bounty_tab ! {delete, Key};
delete(player_payment_tab, Key) ->
    ets:delete(player_payment_tab, Key),
    player_payment_tab ! {delete, Key};
delete(payment_tab, Key) ->
    ets:delete(payment_tab, Key),
    payment_tab ! {delete, Key};
delete(player_pc_prize_tab, Key) ->
    ets:delete(player_pc_prize_tab, Key),
    player_pc_prize_tab ! {delete, Key};
delete(player_pc_goal_tab, Key) ->
    ets:delete(player_pc_goal_tab, Key),
    player_pc_goal_tab ! {delete, Key};
delete(player_camp_tab, Key) ->
    ets:delete(player_camp_tab, Key),
    player_camp_tab ! {delete, Key};
delete(player_sky_ins_tab, Key) ->
    ets:delete(player_sky_ins_tab, Key),
    player_sky_ins_tab ! {delete, Key};
delete(player_fishing_daily_tab, Key) ->
    ets:delete(player_fishing_daily_tab, Key),
    player_fishing_daily_tab ! {delete, Key};
delete(player_daily_tab, Key) ->
    ets:delete(player_daily_tab, Key),
    player_daily_tab ! {delete, Key};
delete(black_shop_state, Key) ->
    ets:delete(black_shop_state, Key),
    black_shop_state ! {delete, Key};
delete(auction_log_tab, Key) ->
    ets:delete(auction_log_tab, Key),
    auction_log_tab ! {delete, Key};
delete(com_auction_new_tab, Key) ->
    ets:delete(com_auction_new_tab, Key),
    com_auction_new_tab ! {delete, Key};
delete(account_prize_tab, Key) ->
    ets:delete(account_prize_tab, Key),
    account_prize_tab ! {delete, Key};
delete(player_attr_image_tab, Key) ->
    ets:delete(player_attr_image_tab, Key),
    player_attr_image_tab ! {delete, Key};
delete(player_equip_tab, Key) ->
    ets:delete(player_equip_tab, Key),
    player_equip_tab ! {delete, Key};
delete(player_data_tab, Key) ->
    ets:delete(player_data_tab, Key),
    player_data_tab ! {delete, Key};
delete(player_misc_tab, Key) ->
    ets:delete(player_misc_tab, Key),
    player_misc_tab ! {delete, Key};
delete(player_attr_tab, Key) ->
    ets:delete(player_attr_tab, Key),
    player_attr_tab ! {delete, Key};
delete(player_name_tab, Key) ->
    ets:delete(player_name_tab, Key),
    player_name_tab ! {delete, Key};
delete(player_tab, Key) ->
    ets:delete(player_tab, Key), player_tab ! {delete, Key};
delete(player_client_data_tab, Key) ->
    ets:delete(player_client_data_tab, Key),
    player_client_data_tab ! {delete, Key};
delete(account_tab, Key) ->
    ets:delete(account_tab, Key),
    account_tab ! {delete, Key};
delete(player_platform_id_tab, Key) ->
    ets:delete(player_platform_id_tab, Key),
    player_platform_id_tab ! {delete, Key};
delete(player_crown_new_tab, Key) ->
    ets:delete(player_crown_new_tab, Key),
    player_crown_new_tab ! {delete, Key};
delete(player_arena_tab, Key) ->
    ets:delete(player_arena_tab, Key),
    player_arena_tab ! {delete, Key};
delete(player_shop_back_tab, Key) ->
    ets:delete(player_shop_back_tab, Key),
    player_shop_back_tab ! {delete, Key};
delete(player_main_ins_challenge_tab, Key) ->
    ets:delete(player_main_ins_challenge_tab, Key),
    player_main_ins_challenge_tab ! {delete, Key};
delete(main_chapter_prize_status, Key) ->
    ets:delete(main_chapter_prize_status, Key),
    main_chapter_prize_status ! {delete, Key};
delete(main_chapter_prize, Key) ->
    ets:delete(main_chapter_prize, Key),
    main_chapter_prize ! {delete, Key};
delete(main_ins_rank, Key) ->
    ets:delete(main_ins_rank, Key),
    main_ins_rank ! {delete, Key};
delete(player_main_ins_tab, Key) ->
    ets:delete(player_main_ins_tab, Key),
    player_main_ins_tab ! {delete, Key};
delete(player_friend_common, Key) ->
    ets:delete(player_friend_common, Key),
    player_friend_common ! {delete, Key};
delete(guild_boss_first_kill, Key) ->
    ets:delete(guild_boss_first_kill, Key),
    guild_boss_first_kill ! {delete, Key};
delete(arena_p2e_rank_tab, Key) ->
    ets:delete(arena_p2e_rank_tab, Key),
    arena_p2e_rank_tab ! {delete, Key};
delete(arena_robot_tab, Key) ->
    ets:delete(arena_robot_tab, Key),
    arena_robot_tab ! {delete, Key};
delete(offline_mail_tab, Key) ->
    ets:delete(offline_mail_tab, Key),
    offline_mail_tab ! {delete, Key};
delete(player_mail_tab, Key) ->
    ets:delete(player_mail_tab, Key),
    player_mail_tab ! {delete, Key};
delete(player_ride_soul, Key) ->
    ets:delete(player_ride_soul, Key),
    player_ride_soul ! {delete, Key};
delete(player_rides, Key) ->
    ets:delete(player_rides, Key),
    player_rides ! {delete, Key};
delete(player_timer_tab, Key) ->
    ets:delete(player_timer_tab, Key),
    player_timer_tab ! {delete, Key};
delete(player_equip_goods_tab, Key) ->
    ets:delete(player_equip_goods_tab, Key),
    player_equip_goods_tab ! {delete, Key};
delete(player_shopping_history, Key) ->
    ets:delete(player_shopping_history, Key),
    player_shopping_history ! {delete, Key};
delete(player_seller_tab, Key) ->
    ets:delete(player_seller_tab, Key),
    player_seller_tab ! {delete, Key};
delete(player_crown_tab, Key) ->
    ets:delete(player_crown_tab, Key),
    player_crown_tab ! {delete, Key};
delete(player_limit_value_tab, Key) ->
    ets:delete(player_limit_value_tab, Key),
    player_limit_value_tab ! {delete, Key};
delete(player_course_tab, Key) ->
    ets:delete(player_course_tab, Key),
    player_course_tab ! {delete, Key};
delete(player_course_boss_tab, Key) ->
    ets:delete(player_course_boss_tab, Key),
    player_course_boss_tab ! {delete, Key};
delete(player_main_star_shop_tab, Key) ->
    ets:delete(player_main_star_shop_tab, Key),
    player_main_star_shop_tab ! {delete, Key};
delete(player_achievement_tab, Key) ->
    ets:delete(player_achievement_tab, Key),
    player_achievement_tab ! {delete, Key};
delete(player_skill_tab, Key) ->
    ets:delete(player_skill_tab, Key),
    player_skill_tab ! {delete, Key};
delete(player_status_tab, Key) ->
    ets:delete(player_status_tab, Key),
    player_status_tab ! {delete, Key};
delete(title_global_data, Key) ->
    ets:delete(title_global_data, Key),
    title_global_data ! {delete, Key};
delete(genid_tab, Key) ->
    ets:delete(genid_tab, Key), genid_tab ! {delete, Key};
delete(player_recharge_reward_tab, Key) ->
    ets:delete(player_recharge_reward_tab, Key),
    player_recharge_reward_tab ! {delete, Key};
delete(player_ever_suit_info_tab, Key) ->
    ets:delete(player_ever_suit_info_tab, Key),
    player_ever_suit_info_tab ! {delete, Key};
delete(T, K) ->
    io:format("delete/2 bad arg T:~p K:~p~n", [T, K]),
    erlang:error(badarg).

update_element(player_event_tab, Key, Op) ->
    case ets:update_element(player_event_tab, Key, Op) of
      true -> player_event_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_pet_egg_tab, Key, Op) ->
    case ets:update_element(player_pet_egg_tab, Key, Op) of
      true ->
	  player_pet_egg_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_server_login_prize_tab, Key,
	       Op) ->
    case ets:update_element(player_server_login_prize_tab,
			    Key, Op)
	of
      true ->
	  player_server_login_prize_tab ! {update_element, Key},
	  true;
      false -> false
    end;
update_element(player_vip_new_tab, Key, Op) ->
    case ets:update_element(player_vip_new_tab, Key, Op) of
      true ->
	  player_vip_new_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(ranking_tab, Key, Op) ->
    case ets:update_element(ranking_tab, Key, Op) of
      true -> ranking_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_nine_lottery_tab, Key, Op) ->
    case ets:update_element(player_nine_lottery_tab, Key,
			    Op)
	of
      true ->
	  player_nine_lottery_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(guild_mining_state, Key, Op) ->
    case ets:update_element(guild_mining_state, Key, Op) of
      true ->
	  guild_mining_state ! {update_element, Key}, true;
      false -> false
    end;
update_element(offline_msg_tab, Key, Op) ->
    case ets:update_element(offline_msg_tab, Key, Op) of
      true -> offline_msg_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(nine_lottery_all_log, Key, Op) ->
    case ets:update_element(nine_lottery_all_log, Key, Op)
	of
      true ->
	  nine_lottery_all_log ! {update_element, Key}, true;
      false -> false
    end;
update_element(guild_boss, Key, Op) ->
    case ets:update_element(guild_boss, Key, Op) of
      true -> guild_boss ! {update_element, Key}, true;
      false -> false
    end;
update_element(guild_event_tab, Key, Op) ->
    case ets:update_element(guild_event_tab, Key, Op) of
      true -> guild_event_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(guild_buildings_tab, Key, Op) ->
    case ets:update_element(guild_buildings_tab, Key, Op) of
      true ->
	  guild_buildings_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(guild_member_online_tab, Key, Op) ->
    case ets:update_element(guild_member_online_tab, Key,
			    Op)
	of
      true ->
	  guild_member_online_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(guild_player_association_tab, Key, Op) ->
    case ets:update_element(guild_player_association_tab,
			    Key, Op)
	of
      true ->
	  guild_player_association_tab ! {update_element, Key},
	  true;
      false -> false
    end;
update_element(guild_tab, Key, Op) ->
    case ets:update_element(guild_tab, Key, Op) of
      true -> guild_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(guild_id_tab, Key, Op) ->
    case ets:update_element(guild_id_tab, Key, Op) of
      true -> guild_id_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_alchemy_tab, Key, Op) ->
    case ets:update_element(player_alchemy_tab, Key, Op) of
      true ->
	  player_alchemy_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(payment_confirm_tab, Key, Op) ->
    case ets:update_element(payment_confirm_tab, Key, Op) of
      true ->
	  payment_confirm_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_guild_saint_tab, Key, Op) ->
    case ets:update_element(player_guild_saint_tab, Key, Op)
	of
      true ->
	  player_guild_saint_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_guild_count, Key, Op) ->
    case ets:update_element(player_guild_count, Key, Op) of
      true ->
	  player_guild_count ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_guild_is_join_guild, Key, Op) ->
    case ets:update_element(player_guild_is_join_guild, Key,
			    Op)
	of
      true ->
	  player_guild_is_join_guild ! {update_element, Key},
	  true;
      false -> false
    end;
update_element(player_guild_tech_buildings, Key, Op) ->
    case ets:update_element(player_guild_tech_buildings,
			    Key, Op)
	of
      true ->
	  player_guild_tech_buildings ! {update_element, Key},
	  true;
      false -> false
    end;
update_element(player_guild_member, Key, Op) ->
    case ets:update_element(player_guild_member, Key, Op) of
      true ->
	  player_guild_member ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_progress_tab, Key, Op) ->
    case ets:update_element(player_progress_tab, Key, Op) of
      true ->
	  player_progress_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(service_camp_tab, Key, Op) ->
    case ets:update_element(service_camp_tab, Key, Op) of
      true -> service_camp_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_arena_log_tab, Key, Op) ->
    case ets:update_element(player_arena_log_tab, Key, Op)
	of
      true ->
	  player_arena_log_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_card_new_tab, Key, Op) ->
    case ets:update_element(player_card_new_tab, Key, Op) of
      true ->
	  player_card_new_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(sky_ins_service, Key, Op) ->
    case ets:update_element(sky_ins_service, Key, Op) of
      true -> sky_ins_service ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_friend_private, Key, Op) ->
    case ets:update_element(player_friend_private, Key, Op)
	of
      true ->
	  player_friend_private ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_mall_tab, Key, Op) ->
    case ets:update_element(player_mall_tab, Key, Op) of
      true -> player_mall_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_open_server_2_tab, Key, Op) ->
    case ets:update_element(player_open_server_2_tab, Key,
			    Op)
	of
      true ->
	  player_open_server_2_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(g_misc_tab, Key, Op) ->
    case ets:update_element(g_misc_tab, Key, Op) of
      true -> g_misc_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_abyss_prize_info_tab, Key, Op) ->
    case ets:update_element(player_abyss_prize_info_tab,
			    Key, Op)
	of
      true ->
	  player_abyss_prize_info_tab ! {update_element, Key},
	  true;
      false -> false
    end;
update_element(player_abyss_tab, Key, Op) ->
    case ets:update_element(player_abyss_tab, Key, Op) of
      true -> player_abyss_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_honest_user_tab, Key, Op) ->
    case ets:update_element(player_honest_user_tab, Key, Op)
	of
      true ->
	  player_honest_user_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_pets_tab, Key, Op) ->
    case ets:update_element(player_pets_tab, Key, Op) of
      true -> player_pets_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_bounty_tab, Key, Op) ->
    case ets:update_element(player_bounty_tab, Key, Op) of
      true -> player_bounty_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_payment_tab, Key, Op) ->
    case ets:update_element(player_payment_tab, Key, Op) of
      true ->
	  player_payment_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(payment_tab, Key, Op) ->
    case ets:update_element(payment_tab, Key, Op) of
      true -> payment_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_pc_prize_tab, Key, Op) ->
    case ets:update_element(player_pc_prize_tab, Key, Op) of
      true ->
	  player_pc_prize_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_pc_goal_tab, Key, Op) ->
    case ets:update_element(player_pc_goal_tab, Key, Op) of
      true ->
	  player_pc_goal_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_camp_tab, Key, Op) ->
    case ets:update_element(player_camp_tab, Key, Op) of
      true -> player_camp_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_sky_ins_tab, Key, Op) ->
    case ets:update_element(player_sky_ins_tab, Key, Op) of
      true ->
	  player_sky_ins_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_fishing_daily_tab, Key, Op) ->
    case ets:update_element(player_fishing_daily_tab, Key,
			    Op)
	of
      true ->
	  player_fishing_daily_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_daily_tab, Key, Op) ->
    case ets:update_element(player_daily_tab, Key, Op) of
      true -> player_daily_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(black_shop_state, Key, Op) ->
    case ets:update_element(black_shop_state, Key, Op) of
      true -> black_shop_state ! {update_element, Key}, true;
      false -> false
    end;
update_element(auction_log_tab, Key, Op) ->
    case ets:update_element(auction_log_tab, Key, Op) of
      true -> auction_log_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(com_auction_new_tab, Key, Op) ->
    case ets:update_element(com_auction_new_tab, Key, Op) of
      true ->
	  com_auction_new_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(account_prize_tab, Key, Op) ->
    case ets:update_element(account_prize_tab, Key, Op) of
      true -> account_prize_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_attr_image_tab, Key, Op) ->
    case ets:update_element(player_attr_image_tab, Key, Op)
	of
      true ->
	  player_attr_image_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_equip_tab, Key, Op) ->
    case ets:update_element(player_equip_tab, Key, Op) of
      true -> player_equip_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_data_tab, Key, Op) ->
    case ets:update_element(player_data_tab, Key, Op) of
      true -> player_data_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_misc_tab, Key, Op) ->
    case ets:update_element(player_misc_tab, Key, Op) of
      true -> player_misc_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_attr_tab, Key, Op) ->
    case ets:update_element(player_attr_tab, Key, Op) of
      true -> player_attr_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_name_tab, Key, Op) ->
    case ets:update_element(player_name_tab, Key, Op) of
      true -> player_name_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_tab, Key, Op) ->
    case ets:update_element(player_tab, Key, Op) of
      true -> player_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_client_data_tab, Key, Op) ->
    case ets:update_element(player_client_data_tab, Key, Op)
	of
      true ->
	  player_client_data_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(account_tab, Key, Op) ->
    case ets:update_element(account_tab, Key, Op) of
      true -> account_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_platform_id_tab, Key, Op) ->
    case ets:update_element(player_platform_id_tab, Key, Op)
	of
      true ->
	  player_platform_id_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_crown_new_tab, Key, Op) ->
    case ets:update_element(player_crown_new_tab, Key, Op)
	of
      true ->
	  player_crown_new_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_arena_tab, Key, Op) ->
    case ets:update_element(player_arena_tab, Key, Op) of
      true -> player_arena_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_shop_back_tab, Key, Op) ->
    case ets:update_element(player_shop_back_tab, Key, Op)
	of
      true ->
	  player_shop_back_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_main_ins_challenge_tab, Key,
	       Op) ->
    case ets:update_element(player_main_ins_challenge_tab,
			    Key, Op)
	of
      true ->
	  player_main_ins_challenge_tab ! {update_element, Key},
	  true;
      false -> false
    end;
update_element(main_chapter_prize_status, Key, Op) ->
    case ets:update_element(main_chapter_prize_status, Key,
			    Op)
	of
      true ->
	  main_chapter_prize_status ! {update_element, Key}, true;
      false -> false
    end;
update_element(main_chapter_prize, Key, Op) ->
    case ets:update_element(main_chapter_prize, Key, Op) of
      true ->
	  main_chapter_prize ! {update_element, Key}, true;
      false -> false
    end;
update_element(main_ins_rank, Key, Op) ->
    case ets:update_element(main_ins_rank, Key, Op) of
      true -> main_ins_rank ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_main_ins_tab, Key, Op) ->
    case ets:update_element(player_main_ins_tab, Key, Op) of
      true ->
	  player_main_ins_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_friend_common, Key, Op) ->
    case ets:update_element(player_friend_common, Key, Op)
	of
      true ->
	  player_friend_common ! {update_element, Key}, true;
      false -> false
    end;
update_element(guild_boss_first_kill, Key, Op) ->
    case ets:update_element(guild_boss_first_kill, Key, Op)
	of
      true ->
	  guild_boss_first_kill ! {update_element, Key}, true;
      false -> false
    end;
update_element(arena_p2e_rank_tab, Key, Op) ->
    case ets:update_element(arena_p2e_rank_tab, Key, Op) of
      true ->
	  arena_p2e_rank_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(arena_robot_tab, Key, Op) ->
    case ets:update_element(arena_robot_tab, Key, Op) of
      true -> arena_robot_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(offline_mail_tab, Key, Op) ->
    case ets:update_element(offline_mail_tab, Key, Op) of
      true -> offline_mail_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_mail_tab, Key, Op) ->
    case ets:update_element(player_mail_tab, Key, Op) of
      true -> player_mail_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_ride_soul, Key, Op) ->
    case ets:update_element(player_ride_soul, Key, Op) of
      true -> player_ride_soul ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_rides, Key, Op) ->
    case ets:update_element(player_rides, Key, Op) of
      true -> player_rides ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_timer_tab, Key, Op) ->
    case ets:update_element(player_timer_tab, Key, Op) of
      true -> player_timer_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_equip_goods_tab, Key, Op) ->
    case ets:update_element(player_equip_goods_tab, Key, Op)
	of
      true ->
	  player_equip_goods_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_shopping_history, Key, Op) ->
    case ets:update_element(player_shopping_history, Key,
			    Op)
	of
      true ->
	  player_shopping_history ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_seller_tab, Key, Op) ->
    case ets:update_element(player_seller_tab, Key, Op) of
      true -> player_seller_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_crown_tab, Key, Op) ->
    case ets:update_element(player_crown_tab, Key, Op) of
      true -> player_crown_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_limit_value_tab, Key, Op) ->
    case ets:update_element(player_limit_value_tab, Key, Op)
	of
      true ->
	  player_limit_value_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_course_tab, Key, Op) ->
    case ets:update_element(player_course_tab, Key, Op) of
      true -> player_course_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_course_boss_tab, Key, Op) ->
    case ets:update_element(player_course_boss_tab, Key, Op)
	of
      true ->
	  player_course_boss_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_main_star_shop_tab, Key, Op) ->
    case ets:update_element(player_main_star_shop_tab, Key,
			    Op)
	of
      true ->
	  player_main_star_shop_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_achievement_tab, Key, Op) ->
    case ets:update_element(player_achievement_tab, Key, Op)
	of
      true ->
	  player_achievement_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_skill_tab, Key, Op) ->
    case ets:update_element(player_skill_tab, Key, Op) of
      true -> player_skill_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_status_tab, Key, Op) ->
    case ets:update_element(player_status_tab, Key, Op) of
      true -> player_status_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(title_global_data, Key, Op) ->
    case ets:update_element(title_global_data, Key, Op) of
      true -> title_global_data ! {update_element, Key}, true;
      false -> false
    end;
update_element(genid_tab, Key, Op) ->
    case ets:update_element(genid_tab, Key, Op) of
      true -> genid_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(player_recharge_reward_tab, Key, Op) ->
    case ets:update_element(player_recharge_reward_tab, Key,
			    Op)
	of
      true ->
	  player_recharge_reward_tab ! {update_element, Key},
	  true;
      false -> false
    end;
update_element(player_ever_suit_info_tab, Key, Op) ->
    case ets:update_element(player_ever_suit_info_tab, Key,
			    Op)
	of
      true ->
	  player_ever_suit_info_tab ! {update_element, Key}, true;
      false -> false
    end;
update_element(T, K, O) ->
    io:format("update_element bad arg T:~p K:~p, O~p~n",
	      [T, K, O]),
    erlang:error(badarg).

update_counter(player_event_tab, Key, Op) ->
    R = ets:update_counter(player_event_tab, Key, Op),
    player_event_tab ! {update_counter, Key, Op},
    R;
update_counter(player_pet_egg_tab, Key, Op) ->
    R = ets:update_counter(player_pet_egg_tab, Key, Op),
    player_pet_egg_tab ! {update_counter, Key, Op},
    R;
update_counter(player_server_login_prize_tab, Key,
	       Op) ->
    R = ets:update_counter(player_server_login_prize_tab,
			   Key, Op),
    player_server_login_prize_tab !
      {update_counter, Key, Op},
    R;
update_counter(player_vip_new_tab, Key, Op) ->
    R = ets:update_counter(player_vip_new_tab, Key, Op),
    player_vip_new_tab ! {update_counter, Key, Op},
    R;
update_counter(ranking_tab, Key, Op) ->
    R = ets:update_counter(ranking_tab, Key, Op),
    ranking_tab ! {update_counter, Key, Op},
    R;
update_counter(player_nine_lottery_tab, Key, Op) ->
    R = ets:update_counter(player_nine_lottery_tab, Key,
			   Op),
    player_nine_lottery_tab ! {update_counter, Key, Op},
    R;
update_counter(guild_mining_state, Key, Op) ->
    R = ets:update_counter(guild_mining_state, Key, Op),
    guild_mining_state ! {update_counter, Key, Op},
    R;
update_counter(offline_msg_tab, Key, Op) ->
    R = ets:update_counter(offline_msg_tab, Key, Op),
    offline_msg_tab ! {update_counter, Key, Op},
    R;
update_counter(nine_lottery_all_log, Key, Op) ->
    R = ets:update_counter(nine_lottery_all_log, Key, Op),
    nine_lottery_all_log ! {update_counter, Key, Op},
    R;
update_counter(guild_boss, Key, Op) ->
    R = ets:update_counter(guild_boss, Key, Op),
    guild_boss ! {update_counter, Key, Op},
    R;
update_counter(guild_event_tab, Key, Op) ->
    R = ets:update_counter(guild_event_tab, Key, Op),
    guild_event_tab ! {update_counter, Key, Op},
    R;
update_counter(guild_buildings_tab, Key, Op) ->
    R = ets:update_counter(guild_buildings_tab, Key, Op),
    guild_buildings_tab ! {update_counter, Key, Op},
    R;
update_counter(guild_member_online_tab, Key, Op) ->
    R = ets:update_counter(guild_member_online_tab, Key,
			   Op),
    guild_member_online_tab ! {update_counter, Key, Op},
    R;
update_counter(guild_player_association_tab, Key, Op) ->
    R = ets:update_counter(guild_player_association_tab,
			   Key, Op),
    guild_player_association_tab !
      {update_counter, Key, Op},
    R;
update_counter(guild_tab, Key, Op) ->
    R = ets:update_counter(guild_tab, Key, Op),
    guild_tab ! {update_counter, Key, Op},
    R;
update_counter(guild_id_tab, Key, Op) ->
    R = ets:update_counter(guild_id_tab, Key, Op),
    guild_id_tab ! {update_counter, Key, Op},
    R;
update_counter(player_alchemy_tab, Key, Op) ->
    R = ets:update_counter(player_alchemy_tab, Key, Op),
    player_alchemy_tab ! {update_counter, Key, Op},
    R;
update_counter(payment_confirm_tab, Key, Op) ->
    R = ets:update_counter(payment_confirm_tab, Key, Op),
    payment_confirm_tab ! {update_counter, Key, Op},
    R;
update_counter(player_guild_saint_tab, Key, Op) ->
    R = ets:update_counter(player_guild_saint_tab, Key, Op),
    player_guild_saint_tab ! {update_counter, Key, Op},
    R;
update_counter(player_guild_count, Key, Op) ->
    R = ets:update_counter(player_guild_count, Key, Op),
    player_guild_count ! {update_counter, Key, Op},
    R;
update_counter(player_guild_is_join_guild, Key, Op) ->
    R = ets:update_counter(player_guild_is_join_guild, Key,
			   Op),
    player_guild_is_join_guild ! {update_counter, Key, Op},
    R;
update_counter(player_guild_tech_buildings, Key, Op) ->
    R = ets:update_counter(player_guild_tech_buildings, Key,
			   Op),
    player_guild_tech_buildings ! {update_counter, Key, Op},
    R;
update_counter(player_guild_member, Key, Op) ->
    R = ets:update_counter(player_guild_member, Key, Op),
    player_guild_member ! {update_counter, Key, Op},
    R;
update_counter(player_progress_tab, Key, Op) ->
    R = ets:update_counter(player_progress_tab, Key, Op),
    player_progress_tab ! {update_counter, Key, Op},
    R;
update_counter(service_camp_tab, Key, Op) ->
    R = ets:update_counter(service_camp_tab, Key, Op),
    service_camp_tab ! {update_counter, Key, Op},
    R;
update_counter(player_arena_log_tab, Key, Op) ->
    R = ets:update_counter(player_arena_log_tab, Key, Op),
    player_arena_log_tab ! {update_counter, Key, Op},
    R;
update_counter(player_card_new_tab, Key, Op) ->
    R = ets:update_counter(player_card_new_tab, Key, Op),
    player_card_new_tab ! {update_counter, Key, Op},
    R;
update_counter(sky_ins_service, Key, Op) ->
    R = ets:update_counter(sky_ins_service, Key, Op),
    sky_ins_service ! {update_counter, Key, Op},
    R;
update_counter(player_friend_private, Key, Op) ->
    R = ets:update_counter(player_friend_private, Key, Op),
    player_friend_private ! {update_counter, Key, Op},
    R;
update_counter(player_mall_tab, Key, Op) ->
    R = ets:update_counter(player_mall_tab, Key, Op),
    player_mall_tab ! {update_counter, Key, Op},
    R;
update_counter(player_open_server_2_tab, Key, Op) ->
    R = ets:update_counter(player_open_server_2_tab, Key,
			   Op),
    player_open_server_2_tab ! {update_counter, Key, Op},
    R;
update_counter(g_misc_tab, Key, Op) ->
    R = ets:update_counter(g_misc_tab, Key, Op),
    g_misc_tab ! {update_counter, Key, Op},
    R;
update_counter(player_abyss_prize_info_tab, Key, Op) ->
    R = ets:update_counter(player_abyss_prize_info_tab, Key,
			   Op),
    player_abyss_prize_info_tab ! {update_counter, Key, Op},
    R;
update_counter(player_abyss_tab, Key, Op) ->
    R = ets:update_counter(player_abyss_tab, Key, Op),
    player_abyss_tab ! {update_counter, Key, Op},
    R;
update_counter(player_honest_user_tab, Key, Op) ->
    R = ets:update_counter(player_honest_user_tab, Key, Op),
    player_honest_user_tab ! {update_counter, Key, Op},
    R;
update_counter(player_pets_tab, Key, Op) ->
    R = ets:update_counter(player_pets_tab, Key, Op),
    player_pets_tab ! {update_counter, Key, Op},
    R;
update_counter(player_bounty_tab, Key, Op) ->
    R = ets:update_counter(player_bounty_tab, Key, Op),
    player_bounty_tab ! {update_counter, Key, Op},
    R;
update_counter(player_payment_tab, Key, Op) ->
    R = ets:update_counter(player_payment_tab, Key, Op),
    player_payment_tab ! {update_counter, Key, Op},
    R;
update_counter(payment_tab, Key, Op) ->
    R = ets:update_counter(payment_tab, Key, Op),
    payment_tab ! {update_counter, Key, Op},
    R;
update_counter(player_pc_prize_tab, Key, Op) ->
    R = ets:update_counter(player_pc_prize_tab, Key, Op),
    player_pc_prize_tab ! {update_counter, Key, Op},
    R;
update_counter(player_pc_goal_tab, Key, Op) ->
    R = ets:update_counter(player_pc_goal_tab, Key, Op),
    player_pc_goal_tab ! {update_counter, Key, Op},
    R;
update_counter(player_camp_tab, Key, Op) ->
    R = ets:update_counter(player_camp_tab, Key, Op),
    player_camp_tab ! {update_counter, Key, Op},
    R;
update_counter(player_sky_ins_tab, Key, Op) ->
    R = ets:update_counter(player_sky_ins_tab, Key, Op),
    player_sky_ins_tab ! {update_counter, Key, Op},
    R;
update_counter(player_fishing_daily_tab, Key, Op) ->
    R = ets:update_counter(player_fishing_daily_tab, Key,
			   Op),
    player_fishing_daily_tab ! {update_counter, Key, Op},
    R;
update_counter(player_daily_tab, Key, Op) ->
    R = ets:update_counter(player_daily_tab, Key, Op),
    player_daily_tab ! {update_counter, Key, Op},
    R;
update_counter(black_shop_state, Key, Op) ->
    R = ets:update_counter(black_shop_state, Key, Op),
    black_shop_state ! {update_counter, Key, Op},
    R;
update_counter(auction_log_tab, Key, Op) ->
    R = ets:update_counter(auction_log_tab, Key, Op),
    auction_log_tab ! {update_counter, Key, Op},
    R;
update_counter(com_auction_new_tab, Key, Op) ->
    R = ets:update_counter(com_auction_new_tab, Key, Op),
    com_auction_new_tab ! {update_counter, Key, Op},
    R;
update_counter(account_prize_tab, Key, Op) ->
    R = ets:update_counter(account_prize_tab, Key, Op),
    account_prize_tab ! {update_counter, Key, Op},
    R;
update_counter(player_attr_image_tab, Key, Op) ->
    R = ets:update_counter(player_attr_image_tab, Key, Op),
    player_attr_image_tab ! {update_counter, Key, Op},
    R;
update_counter(player_equip_tab, Key, Op) ->
    R = ets:update_counter(player_equip_tab, Key, Op),
    player_equip_tab ! {update_counter, Key, Op},
    R;
update_counter(player_data_tab, Key, Op) ->
    R = ets:update_counter(player_data_tab, Key, Op),
    player_data_tab ! {update_counter, Key, Op},
    R;
update_counter(player_misc_tab, Key, Op) ->
    R = ets:update_counter(player_misc_tab, Key, Op),
    player_misc_tab ! {update_counter, Key, Op},
    R;
update_counter(player_attr_tab, Key, Op) ->
    R = ets:update_counter(player_attr_tab, Key, Op),
    player_attr_tab ! {update_counter, Key, Op},
    R;
update_counter(player_name_tab, Key, Op) ->
    R = ets:update_counter(player_name_tab, Key, Op),
    player_name_tab ! {update_counter, Key, Op},
    R;
update_counter(player_tab, Key, Op) ->
    R = ets:update_counter(player_tab, Key, Op),
    player_tab ! {update_counter, Key, Op},
    R;
update_counter(player_client_data_tab, Key, Op) ->
    R = ets:update_counter(player_client_data_tab, Key, Op),
    player_client_data_tab ! {update_counter, Key, Op},
    R;
update_counter(account_tab, Key, Op) ->
    R = ets:update_counter(account_tab, Key, Op),
    account_tab ! {update_counter, Key, Op},
    R;
update_counter(player_platform_id_tab, Key, Op) ->
    R = ets:update_counter(player_platform_id_tab, Key, Op),
    player_platform_id_tab ! {update_counter, Key, Op},
    R;
update_counter(player_crown_new_tab, Key, Op) ->
    R = ets:update_counter(player_crown_new_tab, Key, Op),
    player_crown_new_tab ! {update_counter, Key, Op},
    R;
update_counter(player_arena_tab, Key, Op) ->
    R = ets:update_counter(player_arena_tab, Key, Op),
    player_arena_tab ! {update_counter, Key, Op},
    R;
update_counter(player_shop_back_tab, Key, Op) ->
    R = ets:update_counter(player_shop_back_tab, Key, Op),
    player_shop_back_tab ! {update_counter, Key, Op},
    R;
update_counter(player_main_ins_challenge_tab, Key,
	       Op) ->
    R = ets:update_counter(player_main_ins_challenge_tab,
			   Key, Op),
    player_main_ins_challenge_tab !
      {update_counter, Key, Op},
    R;
update_counter(main_chapter_prize_status, Key, Op) ->
    R = ets:update_counter(main_chapter_prize_status, Key,
			   Op),
    main_chapter_prize_status ! {update_counter, Key, Op},
    R;
update_counter(main_chapter_prize, Key, Op) ->
    R = ets:update_counter(main_chapter_prize, Key, Op),
    main_chapter_prize ! {update_counter, Key, Op},
    R;
update_counter(main_ins_rank, Key, Op) ->
    R = ets:update_counter(main_ins_rank, Key, Op),
    main_ins_rank ! {update_counter, Key, Op},
    R;
update_counter(player_main_ins_tab, Key, Op) ->
    R = ets:update_counter(player_main_ins_tab, Key, Op),
    player_main_ins_tab ! {update_counter, Key, Op},
    R;
update_counter(player_friend_common, Key, Op) ->
    R = ets:update_counter(player_friend_common, Key, Op),
    player_friend_common ! {update_counter, Key, Op},
    R;
update_counter(guild_boss_first_kill, Key, Op) ->
    R = ets:update_counter(guild_boss_first_kill, Key, Op),
    guild_boss_first_kill ! {update_counter, Key, Op},
    R;
update_counter(arena_p2e_rank_tab, Key, Op) ->
    R = ets:update_counter(arena_p2e_rank_tab, Key, Op),
    arena_p2e_rank_tab ! {update_counter, Key, Op},
    R;
update_counter(arena_robot_tab, Key, Op) ->
    R = ets:update_counter(arena_robot_tab, Key, Op),
    arena_robot_tab ! {update_counter, Key, Op},
    R;
update_counter(offline_mail_tab, Key, Op) ->
    R = ets:update_counter(offline_mail_tab, Key, Op),
    offline_mail_tab ! {update_counter, Key, Op},
    R;
update_counter(player_mail_tab, Key, Op) ->
    R = ets:update_counter(player_mail_tab, Key, Op),
    player_mail_tab ! {update_counter, Key, Op},
    R;
update_counter(player_ride_soul, Key, Op) ->
    R = ets:update_counter(player_ride_soul, Key, Op),
    player_ride_soul ! {update_counter, Key, Op},
    R;
update_counter(player_rides, Key, Op) ->
    R = ets:update_counter(player_rides, Key, Op),
    player_rides ! {update_counter, Key, Op},
    R;
update_counter(player_timer_tab, Key, Op) ->
    R = ets:update_counter(player_timer_tab, Key, Op),
    player_timer_tab ! {update_counter, Key, Op},
    R;
update_counter(player_equip_goods_tab, Key, Op) ->
    R = ets:update_counter(player_equip_goods_tab, Key, Op),
    player_equip_goods_tab ! {update_counter, Key, Op},
    R;
update_counter(player_shopping_history, Key, Op) ->
    R = ets:update_counter(player_shopping_history, Key,
			   Op),
    player_shopping_history ! {update_counter, Key, Op},
    R;
update_counter(player_seller_tab, Key, Op) ->
    R = ets:update_counter(player_seller_tab, Key, Op),
    player_seller_tab ! {update_counter, Key, Op},
    R;
update_counter(player_crown_tab, Key, Op) ->
    R = ets:update_counter(player_crown_tab, Key, Op),
    player_crown_tab ! {update_counter, Key, Op},
    R;
update_counter(player_limit_value_tab, Key, Op) ->
    R = ets:update_counter(player_limit_value_tab, Key, Op),
    player_limit_value_tab ! {update_counter, Key, Op},
    R;
update_counter(player_course_tab, Key, Op) ->
    R = ets:update_counter(player_course_tab, Key, Op),
    player_course_tab ! {update_counter, Key, Op},
    R;
update_counter(player_course_boss_tab, Key, Op) ->
    R = ets:update_counter(player_course_boss_tab, Key, Op),
    player_course_boss_tab ! {update_counter, Key, Op},
    R;
update_counter(player_main_star_shop_tab, Key, Op) ->
    R = ets:update_counter(player_main_star_shop_tab, Key,
			   Op),
    player_main_star_shop_tab ! {update_counter, Key, Op},
    R;
update_counter(player_achievement_tab, Key, Op) ->
    R = ets:update_counter(player_achievement_tab, Key, Op),
    player_achievement_tab ! {update_counter, Key, Op},
    R;
update_counter(player_skill_tab, Key, Op) ->
    R = ets:update_counter(player_skill_tab, Key, Op),
    player_skill_tab ! {update_counter, Key, Op},
    R;
update_counter(player_status_tab, Key, Op) ->
    R = ets:update_counter(player_status_tab, Key, Op),
    player_status_tab ! {update_counter, Key, Op},
    R;
update_counter(title_global_data, Key, Op) ->
    R = ets:update_counter(title_global_data, Key, Op),
    title_global_data ! {update_counter, Key, Op},
    R;
update_counter(genid_tab, Key, Op) ->
    R = ets:update_counter(genid_tab, Key, Op),
    genid_tab ! {update_counter, Key, Op},
    R;
update_counter(player_recharge_reward_tab, Key, Op) ->
    R = ets:update_counter(player_recharge_reward_tab, Key,
			   Op),
    player_recharge_reward_tab ! {update_counter, Key, Op},
    R;
update_counter(player_ever_suit_info_tab, Key, Op) ->
    R = ets:update_counter(player_ever_suit_info_tab, Key,
			   Op),
    player_ever_suit_info_tab ! {update_counter, Key, Op},
    R;
update_counter(T, K, O) ->
    io:format("update_counter bad arg T:~p K:~p, O~p~n",
	      [T, K, O]),
    erlang:error(badarg).

insert_new(player_event_tab, Obj) ->
    case ets:insert_new(player_event_tab, Obj) of
      true -> player_event_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_pet_egg_tab, Obj) ->
    case ets:insert_new(player_pet_egg_tab, Obj) of
      true -> player_pet_egg_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_server_login_prize_tab, Obj) ->
    case ets:insert_new(player_server_login_prize_tab, Obj)
	of
      true ->
	  player_server_login_prize_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_vip_new_tab, Obj) ->
    case ets:insert_new(player_vip_new_tab, Obj) of
      true -> player_vip_new_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(ranking_tab, Obj) ->
    case ets:insert_new(ranking_tab, Obj) of
      true -> ranking_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_nine_lottery_tab, Obj) ->
    case ets:insert_new(player_nine_lottery_tab, Obj) of
      true ->
	  player_nine_lottery_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(guild_mining_state, Obj) ->
    case ets:insert_new(guild_mining_state, Obj) of
      true -> guild_mining_state ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(offline_msg_tab, Obj) ->
    case ets:insert_new(offline_msg_tab, Obj) of
      true -> offline_msg_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(nine_lottery_all_log, Obj) ->
    case ets:insert_new(nine_lottery_all_log, Obj) of
      true -> nine_lottery_all_log ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(guild_boss, Obj) ->
    case ets:insert_new(guild_boss, Obj) of
      true -> guild_boss ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(guild_event_tab, Obj) ->
    case ets:insert_new(guild_event_tab, Obj) of
      true -> guild_event_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(guild_buildings_tab, Obj) ->
    case ets:insert_new(guild_buildings_tab, Obj) of
      true -> guild_buildings_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(guild_member_online_tab, Obj) ->
    case ets:insert_new(guild_member_online_tab, Obj) of
      true ->
	  guild_member_online_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(guild_player_association_tab, Obj) ->
    case ets:insert_new(guild_player_association_tab, Obj)
	of
      true ->
	  guild_player_association_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(guild_tab, Obj) ->
    case ets:insert_new(guild_tab, Obj) of
      true -> guild_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(guild_id_tab, Obj) ->
    case ets:insert_new(guild_id_tab, Obj) of
      true -> guild_id_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_alchemy_tab, Obj) ->
    case ets:insert_new(player_alchemy_tab, Obj) of
      true -> player_alchemy_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(payment_confirm_tab, Obj) ->
    case ets:insert_new(payment_confirm_tab, Obj) of
      true -> payment_confirm_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_guild_saint_tab, Obj) ->
    case ets:insert_new(player_guild_saint_tab, Obj) of
      true -> player_guild_saint_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_guild_count, Obj) ->
    case ets:insert_new(player_guild_count, Obj) of
      true -> player_guild_count ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_guild_is_join_guild, Obj) ->
    case ets:insert_new(player_guild_is_join_guild, Obj) of
      true ->
	  player_guild_is_join_guild ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_guild_tech_buildings, Obj) ->
    case ets:insert_new(player_guild_tech_buildings, Obj) of
      true ->
	  player_guild_tech_buildings ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_guild_member, Obj) ->
    case ets:insert_new(player_guild_member, Obj) of
      true -> player_guild_member ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_progress_tab, Obj) ->
    case ets:insert_new(player_progress_tab, Obj) of
      true -> player_progress_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(service_camp_tab, Obj) ->
    case ets:insert_new(service_camp_tab, Obj) of
      true -> service_camp_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_arena_log_tab, Obj) ->
    case ets:insert_new(player_arena_log_tab, Obj) of
      true -> player_arena_log_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_card_new_tab, Obj) ->
    case ets:insert_new(player_card_new_tab, Obj) of
      true -> player_card_new_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(sky_ins_service, Obj) ->
    case ets:insert_new(sky_ins_service, Obj) of
      true -> sky_ins_service ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_friend_private, Obj) ->
    case ets:insert_new(player_friend_private, Obj) of
      true -> player_friend_private ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_mall_tab, Obj) ->
    case ets:insert_new(player_mall_tab, Obj) of
      true -> player_mall_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_open_server_2_tab, Obj) ->
    case ets:insert_new(player_open_server_2_tab, Obj) of
      true ->
	  player_open_server_2_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(g_misc_tab, Obj) ->
    case ets:insert_new(g_misc_tab, Obj) of
      true -> g_misc_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_abyss_prize_info_tab, Obj) ->
    case ets:insert_new(player_abyss_prize_info_tab, Obj) of
      true ->
	  player_abyss_prize_info_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_abyss_tab, Obj) ->
    case ets:insert_new(player_abyss_tab, Obj) of
      true -> player_abyss_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_honest_user_tab, Obj) ->
    case ets:insert_new(player_honest_user_tab, Obj) of
      true -> player_honest_user_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_pets_tab, Obj) ->
    case ets:insert_new(player_pets_tab, Obj) of
      true -> player_pets_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_bounty_tab, Obj) ->
    case ets:insert_new(player_bounty_tab, Obj) of
      true -> player_bounty_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_payment_tab, Obj) ->
    case ets:insert_new(player_payment_tab, Obj) of
      true -> player_payment_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(payment_tab, Obj) ->
    case ets:insert_new(payment_tab, Obj) of
      true -> payment_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_pc_prize_tab, Obj) ->
    case ets:insert_new(player_pc_prize_tab, Obj) of
      true -> player_pc_prize_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_pc_goal_tab, Obj) ->
    case ets:insert_new(player_pc_goal_tab, Obj) of
      true -> player_pc_goal_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_camp_tab, Obj) ->
    case ets:insert_new(player_camp_tab, Obj) of
      true -> player_camp_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_sky_ins_tab, Obj) ->
    case ets:insert_new(player_sky_ins_tab, Obj) of
      true -> player_sky_ins_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_fishing_daily_tab, Obj) ->
    case ets:insert_new(player_fishing_daily_tab, Obj) of
      true ->
	  player_fishing_daily_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_daily_tab, Obj) ->
    case ets:insert_new(player_daily_tab, Obj) of
      true -> player_daily_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(black_shop_state, Obj) ->
    case ets:insert_new(black_shop_state, Obj) of
      true -> black_shop_state ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(auction_log_tab, Obj) ->
    case ets:insert_new(auction_log_tab, Obj) of
      true -> auction_log_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(com_auction_new_tab, Obj) ->
    case ets:insert_new(com_auction_new_tab, Obj) of
      true -> com_auction_new_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(account_prize_tab, Obj) ->
    case ets:insert_new(account_prize_tab, Obj) of
      true -> account_prize_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_attr_image_tab, Obj) ->
    case ets:insert_new(player_attr_image_tab, Obj) of
      true -> player_attr_image_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_equip_tab, Obj) ->
    case ets:insert_new(player_equip_tab, Obj) of
      true -> player_equip_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_data_tab, Obj) ->
    case ets:insert_new(player_data_tab, Obj) of
      true -> player_data_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_misc_tab, Obj) ->
    case ets:insert_new(player_misc_tab, Obj) of
      true -> player_misc_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_attr_tab, Obj) ->
    case ets:insert_new(player_attr_tab, Obj) of
      true -> player_attr_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_name_tab, Obj) ->
    case ets:insert_new(player_name_tab, Obj) of
      true -> player_name_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_tab, Obj) ->
    case ets:insert_new(player_tab, Obj) of
      true -> player_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_client_data_tab, Obj) ->
    case ets:insert_new(player_client_data_tab, Obj) of
      true -> player_client_data_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(account_tab, Obj) ->
    case ets:insert_new(account_tab, Obj) of
      true -> account_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_platform_id_tab, Obj) ->
    case ets:insert_new(player_platform_id_tab, Obj) of
      true -> player_platform_id_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_crown_new_tab, Obj) ->
    case ets:insert_new(player_crown_new_tab, Obj) of
      true -> player_crown_new_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_arena_tab, Obj) ->
    case ets:insert_new(player_arena_tab, Obj) of
      true -> player_arena_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_shop_back_tab, Obj) ->
    case ets:insert_new(player_shop_back_tab, Obj) of
      true -> player_shop_back_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_main_ins_challenge_tab, Obj) ->
    case ets:insert_new(player_main_ins_challenge_tab, Obj)
	of
      true ->
	  player_main_ins_challenge_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(main_chapter_prize_status, Obj) ->
    case ets:insert_new(main_chapter_prize_status, Obj) of
      true ->
	  main_chapter_prize_status ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(main_chapter_prize, Obj) ->
    case ets:insert_new(main_chapter_prize, Obj) of
      true -> main_chapter_prize ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(main_ins_rank, Obj) ->
    case ets:insert_new(main_ins_rank, Obj) of
      true -> main_ins_rank ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_main_ins_tab, Obj) ->
    case ets:insert_new(player_main_ins_tab, Obj) of
      true -> player_main_ins_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_friend_common, Obj) ->
    case ets:insert_new(player_friend_common, Obj) of
      true -> player_friend_common ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(guild_boss_first_kill, Obj) ->
    case ets:insert_new(guild_boss_first_kill, Obj) of
      true -> guild_boss_first_kill ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(arena_p2e_rank_tab, Obj) ->
    case ets:insert_new(arena_p2e_rank_tab, Obj) of
      true -> arena_p2e_rank_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(arena_robot_tab, Obj) ->
    case ets:insert_new(arena_robot_tab, Obj) of
      true -> arena_robot_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(offline_mail_tab, Obj) ->
    case ets:insert_new(offline_mail_tab, Obj) of
      true -> offline_mail_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_mail_tab, Obj) ->
    case ets:insert_new(player_mail_tab, Obj) of
      true -> player_mail_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_ride_soul, Obj) ->
    case ets:insert_new(player_ride_soul, Obj) of
      true -> player_ride_soul ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_rides, Obj) ->
    case ets:insert_new(player_rides, Obj) of
      true -> player_rides ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_timer_tab, Obj) ->
    case ets:insert_new(player_timer_tab, Obj) of
      true -> player_timer_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_equip_goods_tab, Obj) ->
    case ets:insert_new(player_equip_goods_tab, Obj) of
      true -> player_equip_goods_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_shopping_history, Obj) ->
    case ets:insert_new(player_shopping_history, Obj) of
      true ->
	  player_shopping_history ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_seller_tab, Obj) ->
    case ets:insert_new(player_seller_tab, Obj) of
      true -> player_seller_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_crown_tab, Obj) ->
    case ets:insert_new(player_crown_tab, Obj) of
      true -> player_crown_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_limit_value_tab, Obj) ->
    case ets:insert_new(player_limit_value_tab, Obj) of
      true -> player_limit_value_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_course_tab, Obj) ->
    case ets:insert_new(player_course_tab, Obj) of
      true -> player_course_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_course_boss_tab, Obj) ->
    case ets:insert_new(player_course_boss_tab, Obj) of
      true -> player_course_boss_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_main_star_shop_tab, Obj) ->
    case ets:insert_new(player_main_star_shop_tab, Obj) of
      true ->
	  player_main_star_shop_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_achievement_tab, Obj) ->
    case ets:insert_new(player_achievement_tab, Obj) of
      true -> player_achievement_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_skill_tab, Obj) ->
    case ets:insert_new(player_skill_tab, Obj) of
      true -> player_skill_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_status_tab, Obj) ->
    case ets:insert_new(player_status_tab, Obj) of
      true -> player_status_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(title_global_data, Obj) ->
    case ets:insert_new(title_global_data, Obj) of
      true -> title_global_data ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(genid_tab, Obj) ->
    case ets:insert_new(genid_tab, Obj) of
      true -> genid_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_recharge_reward_tab, Obj) ->
    case ets:insert_new(player_recharge_reward_tab, Obj) of
      true ->
	  player_recharge_reward_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(player_ever_suit_info_tab, Obj) ->
    case ets:insert_new(player_ever_suit_info_tab, Obj) of
      true ->
	  player_ever_suit_info_tab ! {first_set, Obj}, true;
      false -> false
    end;
insert_new(T, O) ->
    io:format("insert_new bad arg T:~p O~p~n", [T, O]),
    erlang:error(badarg).

update(player_event_tab, Obj) ->
    OldData = get(player_event_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_event_tab, Obj),
	   player_event_tab ! {set, Obj},
	   put(player_event_tab, Obj)
    end;
update(player_pet_egg_tab, Obj) ->
    OldData = get(player_pet_egg_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_pet_egg_tab, Obj),
	   player_pet_egg_tab ! {set, Obj},
	   put(player_pet_egg_tab, Obj)
    end;
update(player_server_login_prize_tab, Obj) ->
    OldData = get(player_server_login_prize_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_server_login_prize_tab, Obj),
	   player_server_login_prize_tab ! {set, Obj},
	   put(player_server_login_prize_tab, Obj)
    end;
update(player_vip_new_tab, Obj) ->
    OldData = get(player_vip_new_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_vip_new_tab, Obj),
	   player_vip_new_tab ! {set, Obj},
	   put(player_vip_new_tab, Obj)
    end;
update(ranking_tab, Obj) ->
    OldData = get(ranking_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(ranking_tab, Obj),
	   ranking_tab ! {set, Obj},
	   put(ranking_tab, Obj)
    end;
update(player_nine_lottery_tab, Obj) ->
    OldData = get(player_nine_lottery_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_nine_lottery_tab, Obj),
	   player_nine_lottery_tab ! {set, Obj},
	   put(player_nine_lottery_tab, Obj)
    end;
update(guild_mining_state, Obj) ->
    OldData = get(guild_mining_state),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(guild_mining_state, Obj),
	   guild_mining_state ! {set, Obj},
	   put(guild_mining_state, Obj)
    end;
update(offline_msg_tab, Obj) ->
    OldData = get(offline_msg_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(offline_msg_tab, Obj),
	   offline_msg_tab ! {set, Obj},
	   put(offline_msg_tab, Obj)
    end;
update(nine_lottery_all_log, Obj) ->
    OldData = get(nine_lottery_all_log),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(nine_lottery_all_log, Obj),
	   nine_lottery_all_log ! {set, Obj},
	   put(nine_lottery_all_log, Obj)
    end;
update(guild_boss, Obj) ->
    OldData = get(guild_boss),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(guild_boss, Obj),
	   guild_boss ! {set, Obj},
	   put(guild_boss, Obj)
    end;
update(guild_event_tab, Obj) ->
    OldData = get(guild_event_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(guild_event_tab, Obj),
	   guild_event_tab ! {set, Obj},
	   put(guild_event_tab, Obj)
    end;
update(guild_buildings_tab, Obj) ->
    OldData = get(guild_buildings_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(guild_buildings_tab, Obj),
	   guild_buildings_tab ! {set, Obj},
	   put(guild_buildings_tab, Obj)
    end;
update(guild_member_online_tab, Obj) ->
    OldData = get(guild_member_online_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(guild_member_online_tab, Obj),
	   guild_member_online_tab ! {set, Obj},
	   put(guild_member_online_tab, Obj)
    end;
update(guild_player_association_tab, Obj) ->
    OldData = get(guild_player_association_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(guild_player_association_tab, Obj),
	   guild_player_association_tab ! {set, Obj},
	   put(guild_player_association_tab, Obj)
    end;
update(guild_tab, Obj) ->
    OldData = get(guild_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(guild_tab, Obj),
	   guild_tab ! {set, Obj},
	   put(guild_tab, Obj)
    end;
update(guild_id_tab, Obj) ->
    OldData = get(guild_id_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(guild_id_tab, Obj),
	   guild_id_tab ! {set, Obj},
	   put(guild_id_tab, Obj)
    end;
update(player_alchemy_tab, Obj) ->
    OldData = get(player_alchemy_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_alchemy_tab, Obj),
	   player_alchemy_tab ! {set, Obj},
	   put(player_alchemy_tab, Obj)
    end;
update(payment_confirm_tab, Obj) ->
    OldData = get(payment_confirm_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(payment_confirm_tab, Obj),
	   payment_confirm_tab ! {set, Obj},
	   put(payment_confirm_tab, Obj)
    end;
update(player_guild_saint_tab, Obj) ->
    OldData = get(player_guild_saint_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_guild_saint_tab, Obj),
	   player_guild_saint_tab ! {set, Obj},
	   put(player_guild_saint_tab, Obj)
    end;
update(player_guild_count, Obj) ->
    OldData = get(player_guild_count),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_guild_count, Obj),
	   player_guild_count ! {set, Obj},
	   put(player_guild_count, Obj)
    end;
update(player_guild_is_join_guild, Obj) ->
    OldData = get(player_guild_is_join_guild),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_guild_is_join_guild, Obj),
	   player_guild_is_join_guild ! {set, Obj},
	   put(player_guild_is_join_guild, Obj)
    end;
update(player_guild_tech_buildings, Obj) ->
    OldData = get(player_guild_tech_buildings),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_guild_tech_buildings, Obj),
	   player_guild_tech_buildings ! {set, Obj},
	   put(player_guild_tech_buildings, Obj)
    end;
update(player_guild_member, Obj) ->
    OldData = get(player_guild_member),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_guild_member, Obj),
	   player_guild_member ! {set, Obj},
	   put(player_guild_member, Obj)
    end;
update(player_progress_tab, Obj) ->
    OldData = get(player_progress_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_progress_tab, Obj),
	   player_progress_tab ! {set, Obj},
	   put(player_progress_tab, Obj)
    end;
update(service_camp_tab, Obj) ->
    OldData = get(service_camp_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(service_camp_tab, Obj),
	   service_camp_tab ! {set, Obj},
	   put(service_camp_tab, Obj)
    end;
update(player_arena_log_tab, Obj) ->
    OldData = get(player_arena_log_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_arena_log_tab, Obj),
	   player_arena_log_tab ! {set, Obj},
	   put(player_arena_log_tab, Obj)
    end;
update(player_card_new_tab, Obj) ->
    OldData = get(player_card_new_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_card_new_tab, Obj),
	   player_card_new_tab ! {set, Obj},
	   put(player_card_new_tab, Obj)
    end;
update(sky_ins_service, Obj) ->
    OldData = get(sky_ins_service),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(sky_ins_service, Obj),
	   sky_ins_service ! {set, Obj},
	   put(sky_ins_service, Obj)
    end;
update(player_friend_private, Obj) ->
    OldData = get(player_friend_private),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_friend_private, Obj),
	   player_friend_private ! {set, Obj},
	   put(player_friend_private, Obj)
    end;
update(player_mall_tab, Obj) ->
    OldData = get(player_mall_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_mall_tab, Obj),
	   player_mall_tab ! {set, Obj},
	   put(player_mall_tab, Obj)
    end;
update(player_open_server_2_tab, Obj) ->
    OldData = get(player_open_server_2_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_open_server_2_tab, Obj),
	   player_open_server_2_tab ! {set, Obj},
	   put(player_open_server_2_tab, Obj)
    end;
update(g_misc_tab, Obj) ->
    OldData = get(g_misc_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(g_misc_tab, Obj),
	   g_misc_tab ! {set, Obj},
	   put(g_misc_tab, Obj)
    end;
update(player_abyss_prize_info_tab, Obj) ->
    OldData = get(player_abyss_prize_info_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_abyss_prize_info_tab, Obj),
	   player_abyss_prize_info_tab ! {set, Obj},
	   put(player_abyss_prize_info_tab, Obj)
    end;
update(player_abyss_tab, Obj) ->
    OldData = get(player_abyss_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_abyss_tab, Obj),
	   player_abyss_tab ! {set, Obj},
	   put(player_abyss_tab, Obj)
    end;
update(player_honest_user_tab, Obj) ->
    OldData = get(player_honest_user_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_honest_user_tab, Obj),
	   player_honest_user_tab ! {set, Obj},
	   put(player_honest_user_tab, Obj)
    end;
update(player_pets_tab, Obj) ->
    OldData = get(player_pets_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_pets_tab, Obj),
	   player_pets_tab ! {set, Obj},
	   put(player_pets_tab, Obj)
    end;
update(player_bounty_tab, Obj) ->
    OldData = get(player_bounty_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_bounty_tab, Obj),
	   player_bounty_tab ! {set, Obj},
	   put(player_bounty_tab, Obj)
    end;
update(player_payment_tab, Obj) ->
    OldData = get(player_payment_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_payment_tab, Obj),
	   player_payment_tab ! {set, Obj},
	   put(player_payment_tab, Obj)
    end;
update(payment_tab, Obj) ->
    OldData = get(payment_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(payment_tab, Obj),
	   payment_tab ! {set, Obj},
	   put(payment_tab, Obj)
    end;
update(player_pc_prize_tab, Obj) ->
    OldData = get(player_pc_prize_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_pc_prize_tab, Obj),
	   player_pc_prize_tab ! {set, Obj},
	   put(player_pc_prize_tab, Obj)
    end;
update(player_pc_goal_tab, Obj) ->
    OldData = get(player_pc_goal_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_pc_goal_tab, Obj),
	   player_pc_goal_tab ! {set, Obj},
	   put(player_pc_goal_tab, Obj)
    end;
update(player_camp_tab, Obj) ->
    OldData = get(player_camp_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_camp_tab, Obj),
	   player_camp_tab ! {set, Obj},
	   put(player_camp_tab, Obj)
    end;
update(player_sky_ins_tab, Obj) ->
    OldData = get(player_sky_ins_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_sky_ins_tab, Obj),
	   player_sky_ins_tab ! {set, Obj},
	   put(player_sky_ins_tab, Obj)
    end;
update(player_fishing_daily_tab, Obj) ->
    OldData = get(player_fishing_daily_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_fishing_daily_tab, Obj),
	   player_fishing_daily_tab ! {set, Obj},
	   put(player_fishing_daily_tab, Obj)
    end;
update(player_daily_tab, Obj) ->
    OldData = get(player_daily_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_daily_tab, Obj),
	   player_daily_tab ! {set, Obj},
	   put(player_daily_tab, Obj)
    end;
update(black_shop_state, Obj) ->
    OldData = get(black_shop_state),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(black_shop_state, Obj),
	   black_shop_state ! {set, Obj},
	   put(black_shop_state, Obj)
    end;
update(auction_log_tab, Obj) ->
    OldData = get(auction_log_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(auction_log_tab, Obj),
	   auction_log_tab ! {set, Obj},
	   put(auction_log_tab, Obj)
    end;
update(com_auction_new_tab, Obj) ->
    OldData = get(com_auction_new_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(com_auction_new_tab, Obj),
	   com_auction_new_tab ! {set, Obj},
	   put(com_auction_new_tab, Obj)
    end;
update(account_prize_tab, Obj) ->
    OldData = get(account_prize_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(account_prize_tab, Obj),
	   account_prize_tab ! {set, Obj},
	   put(account_prize_tab, Obj)
    end;
update(player_attr_image_tab, Obj) ->
    OldData = get(player_attr_image_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_attr_image_tab, Obj),
	   player_attr_image_tab ! {set, Obj},
	   put(player_attr_image_tab, Obj)
    end;
update(player_equip_tab, Obj) ->
    OldData = get(player_equip_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_equip_tab, Obj),
	   player_equip_tab ! {set, Obj},
	   put(player_equip_tab, Obj)
    end;
update(player_data_tab, Obj) ->
    OldData = get(player_data_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_data_tab, Obj),
	   player_data_tab ! {set, Obj},
	   put(player_data_tab, Obj)
    end;
update(player_misc_tab, Obj) ->
    OldData = get(player_misc_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_misc_tab, Obj),
	   player_misc_tab ! {set, Obj},
	   put(player_misc_tab, Obj)
    end;
update(player_attr_tab, Obj) ->
    OldData = get(player_attr_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_attr_tab, Obj),
	   player_attr_tab ! {set, Obj},
	   put(player_attr_tab, Obj)
    end;
update(player_name_tab, Obj) ->
    OldData = get(player_name_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_name_tab, Obj),
	   player_name_tab ! {set, Obj},
	   put(player_name_tab, Obj)
    end;
update(player_tab, Obj) ->
    OldData = get(player_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_tab, Obj),
	   player_tab ! {set, Obj},
	   put(player_tab, Obj)
    end;
update(player_client_data_tab, Obj) ->
    OldData = get(player_client_data_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_client_data_tab, Obj),
	   player_client_data_tab ! {set, Obj},
	   put(player_client_data_tab, Obj)
    end;
update(account_tab, Obj) ->
    OldData = get(account_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(account_tab, Obj),
	   account_tab ! {set, Obj},
	   put(account_tab, Obj)
    end;
update(player_platform_id_tab, Obj) ->
    OldData = get(player_platform_id_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_platform_id_tab, Obj),
	   player_platform_id_tab ! {set, Obj},
	   put(player_platform_id_tab, Obj)
    end;
update(player_crown_new_tab, Obj) ->
    OldData = get(player_crown_new_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_crown_new_tab, Obj),
	   player_crown_new_tab ! {set, Obj},
	   put(player_crown_new_tab, Obj)
    end;
update(player_arena_tab, Obj) ->
    OldData = get(player_arena_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_arena_tab, Obj),
	   player_arena_tab ! {set, Obj},
	   put(player_arena_tab, Obj)
    end;
update(player_shop_back_tab, Obj) ->
    OldData = get(player_shop_back_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_shop_back_tab, Obj),
	   player_shop_back_tab ! {set, Obj},
	   put(player_shop_back_tab, Obj)
    end;
update(player_main_ins_challenge_tab, Obj) ->
    OldData = get(player_main_ins_challenge_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_main_ins_challenge_tab, Obj),
	   player_main_ins_challenge_tab ! {set, Obj},
	   put(player_main_ins_challenge_tab, Obj)
    end;
update(main_chapter_prize_status, Obj) ->
    OldData = get(main_chapter_prize_status),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(main_chapter_prize_status, Obj),
	   main_chapter_prize_status ! {set, Obj},
	   put(main_chapter_prize_status, Obj)
    end;
update(main_chapter_prize, Obj) ->
    OldData = get(main_chapter_prize),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(main_chapter_prize, Obj),
	   main_chapter_prize ! {set, Obj},
	   put(main_chapter_prize, Obj)
    end;
update(main_ins_rank, Obj) ->
    OldData = get(main_ins_rank),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(main_ins_rank, Obj),
	   main_ins_rank ! {set, Obj},
	   put(main_ins_rank, Obj)
    end;
update(player_main_ins_tab, Obj) ->
    OldData = get(player_main_ins_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_main_ins_tab, Obj),
	   player_main_ins_tab ! {set, Obj},
	   put(player_main_ins_tab, Obj)
    end;
update(player_friend_common, Obj) ->
    OldData = get(player_friend_common),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_friend_common, Obj),
	   player_friend_common ! {set, Obj},
	   put(player_friend_common, Obj)
    end;
update(guild_boss_first_kill, Obj) ->
    OldData = get(guild_boss_first_kill),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(guild_boss_first_kill, Obj),
	   guild_boss_first_kill ! {set, Obj},
	   put(guild_boss_first_kill, Obj)
    end;
update(arena_p2e_rank_tab, Obj) ->
    OldData = get(arena_p2e_rank_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(arena_p2e_rank_tab, Obj),
	   arena_p2e_rank_tab ! {set, Obj},
	   put(arena_p2e_rank_tab, Obj)
    end;
update(arena_robot_tab, Obj) ->
    OldData = get(arena_robot_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(arena_robot_tab, Obj),
	   arena_robot_tab ! {set, Obj},
	   put(arena_robot_tab, Obj)
    end;
update(offline_mail_tab, Obj) ->
    OldData = get(offline_mail_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(offline_mail_tab, Obj),
	   offline_mail_tab ! {set, Obj},
	   put(offline_mail_tab, Obj)
    end;
update(player_mail_tab, Obj) ->
    OldData = get(player_mail_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_mail_tab, Obj),
	   player_mail_tab ! {set, Obj},
	   put(player_mail_tab, Obj)
    end;
update(player_ride_soul, Obj) ->
    OldData = get(player_ride_soul),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_ride_soul, Obj),
	   player_ride_soul ! {set, Obj},
	   put(player_ride_soul, Obj)
    end;
update(player_rides, Obj) ->
    OldData = get(player_rides),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_rides, Obj),
	   player_rides ! {set, Obj},
	   put(player_rides, Obj)
    end;
update(player_timer_tab, Obj) ->
    OldData = get(player_timer_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_timer_tab, Obj),
	   player_timer_tab ! {set, Obj},
	   put(player_timer_tab, Obj)
    end;
update(player_equip_goods_tab, Obj) ->
    OldData = get(player_equip_goods_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_equip_goods_tab, Obj),
	   player_equip_goods_tab ! {set, Obj},
	   put(player_equip_goods_tab, Obj)
    end;
update(player_shopping_history, Obj) ->
    OldData = get(player_shopping_history),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_shopping_history, Obj),
	   player_shopping_history ! {set, Obj},
	   put(player_shopping_history, Obj)
    end;
update(player_seller_tab, Obj) ->
    OldData = get(player_seller_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_seller_tab, Obj),
	   player_seller_tab ! {set, Obj},
	   put(player_seller_tab, Obj)
    end;
update(player_crown_tab, Obj) ->
    OldData = get(player_crown_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_crown_tab, Obj),
	   player_crown_tab ! {set, Obj},
	   put(player_crown_tab, Obj)
    end;
update(player_limit_value_tab, Obj) ->
    OldData = get(player_limit_value_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_limit_value_tab, Obj),
	   player_limit_value_tab ! {set, Obj},
	   put(player_limit_value_tab, Obj)
    end;
update(player_course_tab, Obj) ->
    OldData = get(player_course_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_course_tab, Obj),
	   player_course_tab ! {set, Obj},
	   put(player_course_tab, Obj)
    end;
update(player_course_boss_tab, Obj) ->
    OldData = get(player_course_boss_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_course_boss_tab, Obj),
	   player_course_boss_tab ! {set, Obj},
	   put(player_course_boss_tab, Obj)
    end;
update(player_main_star_shop_tab, Obj) ->
    OldData = get(player_main_star_shop_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_main_star_shop_tab, Obj),
	   player_main_star_shop_tab ! {set, Obj},
	   put(player_main_star_shop_tab, Obj)
    end;
update(player_achievement_tab, Obj) ->
    OldData = get(player_achievement_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_achievement_tab, Obj),
	   player_achievement_tab ! {set, Obj},
	   put(player_achievement_tab, Obj)
    end;
update(player_skill_tab, Obj) ->
    OldData = get(player_skill_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_skill_tab, Obj),
	   player_skill_tab ! {set, Obj},
	   put(player_skill_tab, Obj)
    end;
update(player_status_tab, Obj) ->
    OldData = get(player_status_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_status_tab, Obj),
	   player_status_tab ! {set, Obj},
	   put(player_status_tab, Obj)
    end;
update(title_global_data, Obj) ->
    OldData = get(title_global_data),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(title_global_data, Obj),
	   title_global_data ! {set, Obj},
	   put(title_global_data, Obj)
    end;
update(genid_tab, Obj) ->
    OldData = get(genid_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(genid_tab, Obj),
	   genid_tab ! {set, Obj},
	   put(genid_tab, Obj)
    end;
update(player_recharge_reward_tab, Obj) ->
    OldData = get(player_recharge_reward_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_recharge_reward_tab, Obj),
	   player_recharge_reward_tab ! {set, Obj},
	   put(player_recharge_reward_tab, Obj)
    end;
update(player_ever_suit_info_tab, Obj) ->
    OldData = get(player_ever_suit_info_tab),
    if OldData =:= Obj -> pass;
       true ->
	   ets:insert(player_ever_suit_info_tab, Obj),
	   player_ever_suit_info_tab ! {set, Obj},
	   put(player_ever_suit_info_tab, Obj)
    end;
update(T, O) ->
    io:format("insert2 bad arg T:~p\n", [lists:nth(1, T)]),
    erlang:error(badarg).