%% Auto generated by sproto from robot_item.sproto
%% Don't edit it.

-module(robot_item_sproto).
-export([pkg_msg/2, unpkg_msg/2, to_s/1]).
-include("robot_item_sproto.hrl").

%% id=3  
pkg_msg(?MSG_ITEM_BUCKET_ASSETS, {BucketType}) ->
<<?MSG_ITEM_BUCKET_ASSETS:16, 
BucketType>>
;

%% id=5  
pkg_msg(?MSG_ITEM_BUCKET_ALL_INFO, {BucketType}) ->
<<?MSG_ITEM_BUCKET_ALL_INFO:16, 
BucketType>>
;

%% id=6  
pkg_msg(?MSG_ITEM_BUCKET_DEL, {BucketType, ItemId}) ->
<<?MSG_ITEM_BUCKET_DEL:16, 
BucketType,
    ItemId:32>>
;

%% id=7  
pkg_msg(?MSG_ITEM_BUCKET_SORT, {BucketType}) ->
<<?MSG_ITEM_BUCKET_SORT:16, 
BucketType>>
;

%% id=8  
pkg_msg(?MSG_ITEM_BUCKET_MOVE, {BucketType, Id, Pos}) ->
<<?MSG_ITEM_BUCKET_MOVE:16, 
BucketType,
    Id:32,
    Pos>>
;

%% id=9  
pkg_msg(?MSG_ITEM_BUCKET_SPLIT, {BucketType, Id, Count}) ->
<<?MSG_ITEM_BUCKET_SPLIT:16, 
BucketType,
    Id:32,
    Count:16>>
;

%% id=10  
pkg_msg(?MSG_ITEM_BUCKET_MOVE_CROSS, {SBucketType, Id, DBucketType, Pos}) ->
<<?MSG_ITEM_BUCKET_MOVE_CROSS:16, 
SBucketType,
    Id:32,
    DBucketType,
    Pos>>
;

%% id=12  
pkg_msg(?MSG_ITEM_BUCKET_UNLOCK, {BucketType, UnlockType}) ->
<<?MSG_ITEM_BUCKET_UNLOCK:16, 
BucketType,
    UnlockType>>
;

%% id=13  
pkg_msg(?MSG_ITEM_BUCKET_MERGE, {BucketType, SItemId, DItemId}) ->
<<?MSG_ITEM_BUCKET_MERGE:16, 
BucketType,
    SItemId:32,
    DItemId:32>>
;

%% id=14  
pkg_msg(?MSG_ITEM_USE, {ItemId, ItemCount}) ->
<<?MSG_ITEM_USE:16, 
ItemId:32,
    ItemCount:16>>
;

%% id=16  
pkg_msg(?MSG_GIFT_ITEM_USE, {ItemId, ItemCount}) ->
<<?MSG_GIFT_ITEM_USE:16, 
ItemId:32,
    ItemCount:16>>
;

%% id=17  
pkg_msg(?MSG_ITEM_UNBIND, {ItemId}) ->
<<?MSG_ITEM_UNBIND:16, 
ItemId:32>>
;

%% id=19  
pkg_msg(?MSG_GOODS_COMPOUND, {ItemBid, ItemCount}) ->
<<?MSG_GOODS_COMPOUND:16, 
ItemBid:32,
    ItemCount:16>>
;
pkg_msg(Id, _) -> ok.



%% id = 1  
unpkg_msg(?MSG_ITEM_BUCKET_PUSH_DEL_IDS, Acc0) ->
<<BucketType,
L__delItemL:16, Acc1/binary>> = Acc0,
{DelItemL, Acc2} = 
unpkg_list_u32(L__delItemL, Acc1, []),
{{BucketType,DelItemL}, Acc2};

%% id = 2  
unpkg_msg(?MSG_ITEM_BUCKET_PUSH_CHG, Acc0) ->
<<PushType,
BucketType,
L__itemChangeL:16, Acc1/binary>> = Acc0,
{ItemChangeL, Acc2} = unpkg_list_struct__(L__itemChangeL, Acc1, [], fun unpkg_ano_s__0/1)
,
{{PushType,BucketType,ItemChangeL}, Acc2};

%% id = 3  
unpkg_msg(?MSG_ITEM_BUCKET_ASSETS, Acc0) ->
<<BucketType,
L__assetsInfoL:16, Acc1/binary>> = Acc0,
{AssetsInfoL, Acc2} = unpkg_list_struct__(L__assetsInfoL, Acc1, [], fun unpkg_ano_s__1/1)
,
{{BucketType,AssetsInfoL}, Acc2};

%% id = 4  
unpkg_msg(?MSG_ITEM_BUCKET_ADD_ITEMS, Acc0) ->
<<AddType,
BucketType,
L__itemL:16, Acc1/binary>> = Acc0,
{ItemL, Acc2} = unpkg_list_struct__(L__itemL, Acc1, [], fun unpkg_item_info__/1)
,
{{AddType,BucketType,ItemL}, Acc2};

%% id = 5  
unpkg_msg(?MSG_ITEM_BUCKET_ALL_INFO, Acc0) ->
<<BucketType,
UnlockSize:32,
UT:32,
L__itemL:16, Acc1/binary>> = Acc0,
{ItemL, Acc2} = unpkg_list_struct__(L__itemL, Acc1, [], fun unpkg_item_info__/1)
,
{{BucketType,UnlockSize,UT,ItemL}, Acc2};

%% id = 6  
unpkg_msg(?MSG_ITEM_BUCKET_DEL, Acc0) ->
<<ReplyNum,
Acc1/binary>> = Acc0,
 {{ReplyNum}, Acc1};

%% id = 7  
unpkg_msg(?MSG_ITEM_BUCKET_SORT, Acc0) ->
<<ReplyNum,
Acc1/binary>> = Acc0,
 {{ReplyNum}, Acc1};

%% id = 8  
unpkg_msg(?MSG_ITEM_BUCKET_MOVE, Acc0) ->
<<ReplyNum,
Acc1/binary>> = Acc0,
 {{ReplyNum}, Acc1};

%% id = 9  
unpkg_msg(?MSG_ITEM_BUCKET_SPLIT, Acc0) ->
<<ReplyNum,
Acc1/binary>> = Acc0,
 {{ReplyNum}, Acc1};

%% id = 10  
unpkg_msg(?MSG_ITEM_BUCKET_MOVE_CROSS, Acc0) ->
<<ReplyNum,
Acc1/binary>> = Acc0,
 {{ReplyNum}, Acc1};

%% id = 12  
unpkg_msg(?MSG_ITEM_BUCKET_UNLOCK, Acc0) ->
<<ReplyNum,
BucketType,
UnlockType,
UT:32,
Acc1/binary>> = Acc0,
 {{ReplyNum,BucketType,UnlockType,UT}, Acc1};

%% id = 13  
unpkg_msg(?MSG_ITEM_BUCKET_MERGE, Acc0) ->
<<ReplyNum,
Acc1/binary>> = Acc0,
 {{ReplyNum}, Acc1};

%% id = 14  
unpkg_msg(?MSG_ITEM_USE, Acc0) ->
<<ReplyNum,
Acc1/binary>> = Acc0,
 {{ReplyNum}, Acc1};

%% id = 16  
unpkg_msg(?MSG_GIFT_ITEM_USE, Acc0) ->
<<L__item_list:16, Acc1/binary>> = Acc0,
{Item_list, Acc2} = unpkg_list_struct__(L__item_list, Acc1, [], fun unpkg_ano_s__2/1)
,
{{Item_list}, Acc2};

%% id = 15  
unpkg_msg(?MSG_ITEM_NEW_ADD_NUM, Acc0) ->
<<AddNum:32,
Acc1/binary>> = Acc0,
 {{AddNum}, Acc1};

%% id = 17  
unpkg_msg(?MSG_ITEM_UNBIND, Acc0) ->
<<ReplyNum,
ItemId:32,
Acc1/binary>> = Acc0,
 {{ReplyNum,ItemId}, Acc1};

%% id = 18  
unpkg_msg(?MSG_ITEM_NEW_ITEM, Acc0) ->
<<L__ItemList:16, Acc1/binary>> = Acc0,
{ItemList, Acc2} = 
unpkg_list_u64(L__ItemList, Acc1, []),
{{ItemList}, Acc2};

%% id = 19  
unpkg_msg(?MSG_GOODS_COMPOUND, Acc0) ->
<<ReplyNum,
Acc1/binary>> = Acc0,
 {{ReplyNum}, Acc1};
unpkg_msg(Id, _) -> ok.


unpkg_ano_s__0(Acc0) ->
<<ItemId:32,
ItemVal,
Acc1/binary>> = Acc0,
 {{ItemId,ItemVal}, Acc1}.
unpkg_ano_s__1(Acc0) ->
<<AssetsId:32,
AssetsVal,
Acc1/binary>> = Acc0,
 {{AssetsId,AssetsVal}, Acc1}.
unpkg_item_info__(Acc0) ->
<<Id:32,
Bid:32,
Pos,
Qly,
Qua:16,
Bind,
IsJd,
SuitId:32,
QhLev,
Power:32,
L__ExtraAttr:16, Acc1/binary>> = Acc0,
{ExtraAttr, Acc2} = unpkg_list_struct__(L__ExtraAttr, Acc1, [], fun unpkg_ano_s__3/1)
,
<<L__GemInfo:16, Acc3/binary>> = Acc2,
{GemInfo, Acc4} = 
unpkg_list_u32(L__GemInfo, Acc3, []),
<<L__ItemEx:16, Acc5/binary>> = Acc4,
{ItemEx, Acc6} = unpkg_list_struct__(L__ItemEx, Acc5, [], fun unpkg_ano_s__4/1)
,
<<L__SkillChanges:16, Acc7/binary>> = Acc6,
{SkillChanges, Acc8} = 
unpkg_list_u32(L__SkillChanges, Acc7, []),
<<L__JDListMax:16, Acc9/binary>> = Acc8,
{JDListMax, Acc10} = 
unpkg_list_u32(L__JDListMax, Acc9, []),
<<L__JDListMin:16, Acc11/binary>> = Acc10,
{JDListMin, Acc12} = 
unpkg_list_u32(L__JDListMin, Acc11, []),
<<Fumo:16,
L__fumoAttrList:16, Acc13/binary>> = Acc12,
{FumoAttrList, Acc14} = unpkg_list_struct__(L__fumoAttrList, Acc13, [], fun unpkg_ano_s__5/1)
,
{{Id,Bid,Pos,Qly,Qua,Bind,IsJd,SuitId,QhLev,Power,ExtraAttr,GemInfo,ItemEx,SkillChanges,JDListMax,JDListMin,Fumo,FumoAttrList}, Acc14}.
unpkg_ano_s__2(Acc0) ->
<<ItemId:32,
ItemCount:32,
Acc1/binary>> = Acc0,
 {{ItemId,ItemCount}, Acc1}.
unpkg_ano_s__3(Acc0) ->
<<ExtraModId,
L__Attr:16, Acc1/binary>> = Acc0,
{Attr, Acc2} = unpkg_list_struct__(L__Attr, Acc1, [], fun unpkg_ano_s__6/1)
,
{{ExtraModId,Attr}, Acc2}.
unpkg_ano_s__4(Acc0) ->
<<Key,
Val:32,
Acc1/binary>> = Acc0,
 {{Key,Val}, Acc1}.
unpkg_ano_s__5(Acc0) ->
<<TypeId,
AttrId,
AttrVal:32,
Acc1/binary>> = Acc0,
 {{TypeId,AttrId,AttrVal}, Acc1}.
unpkg_ano_s__6(Acc0) ->
<<AttrCode,
AttrVal:32,
AttrPer,
Acc1/binary>> = Acc0,
 {{AttrCode,AttrVal,AttrPer}, Acc1}.


to_s(?MSG_ITEM_BUCKET_PUSH_DEL_IDS) -> <<"MSG_ITEM_BUCKET_PUSH_DEL_IDS">>; %% high 3, id 1
to_s(?MSG_ITEM_BUCKET_PUSH_CHG) -> <<"MSG_ITEM_BUCKET_PUSH_CHG">>; %% high 3, id 2
to_s(?MSG_ITEM_BUCKET_ASSETS) -> <<"MSG_ITEM_BUCKET_ASSETS">>; %% high 3, id 3
to_s(?MSG_ITEM_BUCKET_ADD_ITEMS) -> <<"MSG_ITEM_BUCKET_ADD_ITEMS">>; %% high 3, id 4
to_s(?MSG_ITEM_BUCKET_ALL_INFO) -> <<"MSG_ITEM_BUCKET_ALL_INFO">>; %% high 3, id 5
to_s(?MSG_ITEM_BUCKET_DEL) -> <<"MSG_ITEM_BUCKET_DEL">>; %% high 3, id 6
to_s(?MSG_ITEM_BUCKET_SORT) -> <<"MSG_ITEM_BUCKET_SORT">>; %% high 3, id 7
to_s(?MSG_ITEM_BUCKET_MOVE) -> <<"MSG_ITEM_BUCKET_MOVE">>; %% high 3, id 8
to_s(?MSG_ITEM_BUCKET_SPLIT) -> <<"MSG_ITEM_BUCKET_SPLIT">>; %% high 3, id 9
to_s(?MSG_ITEM_BUCKET_MOVE_CROSS) -> <<"MSG_ITEM_BUCKET_MOVE_CROSS">>; %% high 3, id 10
to_s(?MSG_ITEM_BUCKET_UNLOCK) -> <<"MSG_ITEM_BUCKET_UNLOCK">>; %% high 3, id 12
to_s(?MSG_ITEM_BUCKET_MERGE) -> <<"MSG_ITEM_BUCKET_MERGE">>; %% high 3, id 13
to_s(?MSG_ITEM_USE) -> <<"MSG_ITEM_USE">>; %% high 3, id 14
to_s(?MSG_GIFT_ITEM_USE) -> <<"MSG_GIFT_ITEM_USE">>; %% high 3, id 16
to_s(?MSG_ITEM_NEW_ADD_NUM) -> <<"MSG_ITEM_NEW_ADD_NUM">>; %% high 3, id 15
to_s(?MSG_ITEM_UNBIND) -> <<"MSG_ITEM_UNBIND">>; %% high 3, id 17
to_s(?MSG_ITEM_NEW_ITEM) -> <<"MSG_ITEM_NEW_ITEM">>; %% high 3, id 18
to_s(?MSG_GOODS_COMPOUND) -> <<"MSG_GOODS_COMPOUND">>; %% high 3, id 19
to_s(_) -> <<"unknown msg">>.
unpkg_list_struct__(0, Bin, List, _Fn) -> {lists:reverse(List), Bin};
unpkg_list_struct__(L, Bin, List, Fn) -> {E, Bin1} = Fn(Bin), unpkg_list_struct__(L-1, Bin1, [E|List], Fn).
unpkg_list_u64(0, Bin, List) -> {lists:reverse(List), Bin};
unpkg_list_u64(Len, Bin, List) -> 
 <<E:64,Bin1/binary>> = Bin,
unpkg_list_u64(Len-1, Bin1, [E|List]).
unpkg_list_u32(0, Bin, List) -> {lists:reverse(List), Bin};
unpkg_list_u32(Len, Bin, List) -> 
 <<E:32,Bin1/binary>> = Bin,
unpkg_list_u32(Len-1, Bin1, [E|List]).
