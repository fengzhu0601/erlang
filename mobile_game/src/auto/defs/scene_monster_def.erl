%% Auto generated by defs from scene_monster.def
%% Don't edit it.

-module(scene_monster_def).
-compile([export_all]).

-include("scene_monster_def.hrl").

m_event_all() -> [ event_start  , event_leave  , event_stroll_wait_timeout  , event_reaction_timeout  , event_move_over  , event_move_step  , event_release_skill  , event_release_skill_over  , event_ba_ti_end  , event_stiff_end  , event_beat_back_stiff_end  , event_has_enemy  , event_start_move ].
%% enum monster_default_set 
monster_default_set_to_s(?monster_min_level) -> <<"monster_min_level">>;
monster_default_set_to_s(?monster_max_level) -> <<"monster_max_level">>;
monster_default_set_to_s(_) -> invalid_id.

is_valid_monster_default_set(?monster_min_level) -> true;
is_valid_monster_default_set(?monster_max_level) -> true;
is_valid_monster_default_set(_) -> false.
enum_monster_default_set_all() -> [1 , 100].
enum_monster_default_set_size() -> 2.
%% enum mon_mtype 
mon_mtype_to_s(?MT_QUALITY_1) -> <<"MT_QUALITY_1">>;
mon_mtype_to_s(?MT_QUALITY_2) -> <<"MT_QUALITY_2">>;
mon_mtype_to_s(?MT_QUALITY_3) -> <<"MT_QUALITY_3">>;
mon_mtype_to_s(?MT_QUALITY_4) -> <<"MT_QUALITY_4">>;
mon_mtype_to_s(_) -> invalid_id.

is_valid_mon_mtype(?MT_QUALITY_1) -> true;
is_valid_mon_mtype(?MT_QUALITY_2) -> true;
is_valid_mon_mtype(?MT_QUALITY_3) -> true;
is_valid_mon_mtype(?MT_QUALITY_4) -> true;
is_valid_mon_mtype(_) -> false.
enum_mon_mtype_all() -> [1 , 2, 3, 4].
enum_mon_mtype_size() -> 4.
%% enum mon_type 
mon_type_to_s(?MT_NORMAL) -> <<"MT_NORMAL">>;
mon_type_to_s(?MT_CONVOY) -> <<"MT_CONVOY">>;
mon_type_to_s(?MT_BOOS) -> <<"MT_BOOS">>;
mon_type_to_s(?MT_SKILL_OBJ) -> <<"MT_SKILL_OBJ">>;
mon_type_to_s(?MT_PET) -> <<"MT_PET">>;
mon_type_to_s(_) -> invalid_id.

is_valid_mon_type(?MT_NORMAL) -> true;
is_valid_mon_type(?MT_CONVOY) -> true;
is_valid_mon_type(?MT_BOOS) -> true;
is_valid_mon_type(?MT_SKILL_OBJ) -> true;
is_valid_mon_type(?MT_PET) -> true;
is_valid_mon_type(_) -> false.
enum_mon_type_all() -> [1 , 2, 3, 4, 5].
enum_mon_type_size() -> 5.
